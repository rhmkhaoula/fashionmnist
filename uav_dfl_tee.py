import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import torch.nn.functional as F
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import time
from datetime import datetime
import os
import json
import copy
import hashlib
from collections import defaultdict
import random
import simpy

# Fixer les graines pour la reproductibilit√©
random.seed(42)
np.random.seed(42)
torch.manual_seed(42)

# ================================
# TRUSTED EXECUTION ENVIRONMENT (TEE) SIMULATION
# ================================

class TEEManager:
    """Simulation d'un Environnement d'Ex√©cution de Confiance (TEE)"""
    
    def __init__(self, uav_id, memory_limit=512*1024*1024):
        self.uav_id = uav_id
        self.memory_limit = memory_limit
        self.secure_memory = {}
        self.is_compromised = False
        self.access_log = []
        self.encryption_key = self._generate_tee_key()
        
        print(f"   üîí UAV-{uav_id}: TEE initialis√© (M√©moire: {memory_limit//1024//1024}MB)")
    
    def _generate_tee_key(self):
        """G√©n√®re une cl√© cryptographique unique pour ce TEE"""
        return hashlib.sha256(f"TEE_KEY_{self.uav_id}_{random.randint(0,999999)}".encode()).hexdigest()
    
    def secure_context(self):
        """Context manager pour l'ex√©cution s√©curis√©e dans TEE"""
        return TEESecureContext(self)
    
    def secure_store(self, key, data):
        """Stockage s√©curis√© dans la m√©moire TEE"""
        if not self.is_compromised:
            encrypted_data = self._encrypt_data(data)
            self.secure_memory[key] = encrypted_data
            self.access_log.append(f"STORE_{key}_{datetime.now()}")
            return True
        return False
    
    def secure_retrieve(self, key):
        """R√©cup√©ration s√©curis√©e depuis la m√©moire TEE"""
        if not self.is_compromised and key in self.secure_memory:
            encrypted_data = self.secure_memory[key]
            data = self._decrypt_data(encrypted_data)
            self.access_log.append(f"RETRIEVE_{key}_{datetime.now()}")
            return data
        return None
    
    def _encrypt_data(self, data):
        """Simulation de chiffrement des donn√©es dans TEE"""
        return f"ENCRYPTED_{self.encryption_key[:8]}_{hash(str(data))}"
    
    def _decrypt_data(self, encrypted_data):
        """Simulation de d√©chiffrement des donn√©es dans TEE"""
        if encrypted_data.startswith(f"ENCRYPTED_{self.encryption_key[:8]}"):
            return "DECRYPTED_DATA"
        return None
    
    def get_security_status(self):
        """Retourne le statut de s√©curit√© du TEE"""
        return {
            'compromised': self.is_compromised,
            'memory_usage': len(self.secure_memory),
            'access_count': len(self.access_log),
            'tee_id': self.uav_id
        }

class TEESecureContext:
    """Context manager pour l'ex√©cution s√©curis√©e"""
    
    def __init__(self, tee_manager):
        self.tee = tee_manager
    
    def __enter__(self):
        if self.tee.is_compromised:
            raise SecurityException(f"TEE compromis pour UAV-{self.tee.uav_id}")
        return self.tee
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        pass

class SecurityException(Exception):
    """Exception lev√©e en cas de violation de s√©curit√© TEE"""
    pass

# ================================
# D√âTECTION DE MENACES LOCALE
# ================================

class LocalThreatDetector:
    """D√©tecteur de menaces local - AUCUNE communication suppl√©mentaire"""
    
    def __init__(self, uav_id):
        self.uav_id = uav_id
        self.baseline_metrics = {}
        self.suspicious_peers = set()
        self.threat_history = []
        self.byzantine_threshold = 3.0
        
    def analyze_peer_updates(self, peer_weights, peer_ids):
        """Analyse locale des mises √† jour re√ßues - PAS de communication"""
        threats_detected = []
        
        if not peer_weights:
            return threats_detected
        
        # 1. D√©tection d'attaques Byzantine
        byzantine_threats = self._detect_byzantine_attacks(peer_weights, peer_ids)
        threats_detected.extend(byzantine_threats)
        
        # 2. D√©tection d'attaques Sybil
        sybil_threats = self._detect_sybil_attacks(peer_weights, peer_ids)
        threats_detected.extend(sybil_threats)
        
        # 3. D√©tection d'anomalies dans les tailles
        size_threats = self._detect_size_anomalies(peer_weights, peer_ids)
        threats_detected.extend(size_threats)
        
        if threats_detected:
            self.threat_history.append({
                'timestamp': datetime.now(),
                'threats': threats_detected,
                'total_peers': len(peer_weights)
            })
        
        return threats_detected
    
    def _detect_byzantine_attacks(self, peer_weights, peer_ids):
        """D√©tection d'attaques Byzantine par analyse des gradients"""
        threats = []
        
        if len(peer_weights) < 2:
            return threats
        
        # Calculer les similarit√©s entre mod√®les
        similarities = []
        for i, weights_i in enumerate(peer_weights):
            for j, weights_j in enumerate(peer_weights[i+1:], i+1):
                sim = self._calculate_model_similarity(weights_i, weights_j)
                similarities.append((peer_ids[i], peer_ids[j], sim))
        
        # Identifier les outliers
        if similarities:
            sim_values = [sim[2] for sim in similarities]
            mean_sim = np.mean(sim_values)
            std_sim = np.std(sim_values)
            
            for peer_id, weights in zip(peer_ids, peer_weights):
                peer_similarities = [sim[2] for sim in similarities 
                                   if sim[0] == peer_id or sim[1] == peer_id]
                
                if peer_similarities:
                    avg_peer_sim = np.mean(peer_similarities)
                    if avg_peer_sim < (mean_sim - self.byzantine_threshold * std_sim):
                        threats.append({
                            'type': 'Byzantine',
                            'peer_id': peer_id,
                            'severity': 'HIGH',
                            'similarity_score': avg_peer_sim
                        })
                        self.suspicious_peers.add(peer_id)
        
        return threats
    
    def _detect_sybil_attacks(self, peer_weights, peer_ids):
        """D√©tection d'attaques Sybil par analyse des patterns"""
        threats = []
        
        for i, weights_i in enumerate(peer_weights):
            for j, weights_j in enumerate(peer_weights[i+1:], i+1):
                similarity = self._calculate_model_similarity(weights_i, weights_j)
                
                if similarity > 0.99:
                    threats.append({
                        'type': 'Sybil',
                        'peer_ids': [peer_ids[i], peer_ids[j]],
                        'severity': 'MEDIUM',
                        'similarity': similarity
                    })
        
        return threats
    
    def _detect_size_anomalies(self, peer_weights, peer_ids):
        """D√©tection d'anomalies dans les tailles de mod√®les"""
        threats = []
        
        model_sizes = []
        for weights in peer_weights:
            size = sum(w.numel() for w in weights.values())
            model_sizes.append(size)
        
        if len(model_sizes) > 1:
            mean_size = np.mean(model_sizes)
            std_size = np.std(model_sizes)
            
            for i, (peer_id, size) in enumerate(zip(peer_ids, model_sizes)):
                if abs(size - mean_size) > 2 * std_size:
                    threats.append({
                        'type': 'Size_Anomaly',
                        'peer_id': peer_id,
                        'severity': 'LOW',
                        'size_deviation': abs(size - mean_size) / mean_size
                    })
        
        return threats
    
    def _calculate_model_similarity(self, weights1, weights2):
        """Calcule la similarit√© entre deux mod√®les"""
        try:
            total_similarity = 0.0
            total_params = 0
            
            common_keys = set(weights1.keys()) & set(weights2.keys())
            
            for key in common_keys:
                w1 = weights1[key].flatten()
                w2 = weights2[key].flatten()
                
                if w1.shape == w2.shape:
                    cos_sim = torch.nn.functional.cosine_similarity(
                        w1.unsqueeze(0), w2.unsqueeze(0)
                    ).item()
                    
                    param_count = w1.numel()
                    total_similarity += cos_sim * param_count
                    total_params += param_count
            
            return total_similarity / total_params if total_params > 0 else 0.0
            
        except Exception:
            return 0.0
    
    def filter_suspicious_updates(self, peer_weights, peer_ids, threats):
        """Filtre les mises √† jour suspectes sans communication"""
        clean_weights = []
        clean_ids = []
        
        suspect_ids = set()
        for threat in threats:
            if threat['severity'] in ['HIGH', 'CRITICAL']:
                if 'peer_id' in threat:
                    suspect_ids.add(threat['peer_id'])
                elif 'peer_ids' in threat:
                    suspect_ids.update(threat['peer_ids'])
        
        for weights, peer_id in zip(peer_weights, peer_ids):
            if peer_id not in suspect_ids:
                clean_weights.append(weights)
                clean_ids.append(peer_id)
        
        if suspect_ids:
            print(f"   üõ°Ô∏è UAV-{self.uav_id}: {len(suspect_ids)} UAV suspects filtr√©s: {list(suspect_ids)}")
        
        return clean_weights, clean_ids

# ================================
# MOD√àLES CNN - ARCHITECTURE DE test_fin.py AVEC SUPPORT GREEDY
# ================================

class CNNModelMNIST(nn.Module):
    """Mod√®le CNN MNIST - Simple avec support Greedy"""
    
    def __init__(self, enable_greedy=False):
        super(CNNModelMNIST, self).__init__()
        
        self.enable_greedy = enable_greedy
        self.current_fc_depth = 1
        self.max_fc_layers = 3
        
        # Architecture simple pour MNIST
        self.conv1 = nn.Conv2d(1, 32, kernel_size=5, padding=2)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=5, padding=2)
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(0.25)
        
        # Couches FC simples
        self.fc1 = nn.Linear(64 * 7 * 7, 256)
        self.fc2 = nn.Linear(256, 128)
        self.fc3 = nn.Linear(128, 10)
        
        # Couches de sortie pour Greedy
        if self.enable_greedy:
            self.output_layers = nn.ModuleDict({
                '1': nn.Linear(256, 10),
                '2': nn.Linear(128, 10),
                '3': nn.Linear(10, 10)
            })
            self._freeze_unused_layers()

    def _freeze_unused_layers(self):
        """G√®le les couches non utilis√©es en mode Greedy"""
        if not self.enable_greedy:
            return
            
        layers = [self.fc1, self.fc2, self.fc3]
        for i, layer in enumerate(layers):
            if i >= self.current_fc_depth:
                for param in layer.parameters():
                    param.requires_grad = False
            else:
                for param in layer.parameters():
                    param.requires_grad = True
        
        if hasattr(self, 'output_layers'):
            for key, layer in self.output_layers.items():
                if key == str(self.current_fc_depth):
                    for param in layer.parameters():
                        param.requires_grad = True
                else:
                    for param in layer.parameters():
                        param.requires_grad = False

    def add_greedy_layer(self):
        """Ajoute une couche FC (Greedy Layer-Wise)"""
        if not self.enable_greedy or self.current_fc_depth >= self.max_fc_layers:
            return False
            
        print(f"   üß† Ajout couche FC #{self.current_fc_depth + 1} (Greedy)")
        
        layers = [self.fc1, self.fc2, self.fc3]
        for i in range(self.current_fc_depth):
            for param in layers[i].parameters():
                param.requires_grad = False
        
        self.current_fc_depth += 1
        self._freeze_unused_layers()
        
        return True

    def forward(self, x):
        # Forward simple pour MNIST
        x = F.relu(self.conv1(x))
        x = self.pool(x)
        x = F.relu(self.conv2(x))
        x = self.pool(x)
        x = self.dropout(x)
        
        x = x.view(-1, 64 * 7 * 7)
        
        if self.enable_greedy:
            # Mode Greedy: utiliser seulement les couches actives
            x = F.relu(self.fc1(x))
            if self.current_fc_depth == 1:
                return self.output_layers['1'](x)
            
            x = F.relu(self.fc2(x))
            if self.current_fc_depth == 2:
                return self.output_layers['2'](x)
                
            x = self.fc3(x)
            return x
        else:
            # Mode standard
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x

    def get_greedy_status(self):
        """Retourne le statut du Greedy"""
        return {
            'enabled': self.enable_greedy,
            'current_depth': self.current_fc_depth,
            'max_depth': self.max_fc_layers,
            'can_add_layer': self.current_fc_depth < self.max_fc_layers
        }

class CNNModelCIFAR10(nn.Module):
    """üîß Mod√®le CNN CIFAR-10 - Architecture EXACTE de test_fin.py avec support Greedy ajout√©"""
    
    def __init__(self, enable_greedy=False):
        super(CNNModelCIFAR10, self).__init__()
        
        # Support Greedy Layer-Wise
        self.enable_greedy = enable_greedy
        self.current_fc_depth = 1
        self.max_fc_layers = 3
        
        # üîß ARCHITECTURE EXACTE DE test_fin.py
        # Premier bloc convolutionnel
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(64)
        
        # Deuxi√®me bloc convolutionnel
        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(128)
        
        # Troisi√®me bloc convolutionnel
        self.conv3 = nn.Conv2d(128, 256, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(256)
        
        # Quatri√®me bloc convolutionnel
        self.conv4 = nn.Conv2d(256, 512, kernel_size=3, padding=1)
        self.bn4 = nn.BatchNorm2d(512)
        
        # Pooling et dropout - EXACTEMENT comme test_fin.py
        self.pool = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout(0.3)
        self.dropout_fc = nn.Dropout(0.5)
        
        # Couches fully connected - EXACTEMENT comme test_fin.py
        self.fc1 = nn.Linear(512 * 2 * 2, 1024)
        self.bn_fc1 = nn.BatchNorm1d(1024)
        self.fc2 = nn.Linear(1024, 512)
        self.bn_fc2 = nn.BatchNorm1d(512)
        self.fc3 = nn.Linear(512, 10)
        
        # Couches de sortie pour Greedy (ajout pour test_dfl_tee.py)
        if self.enable_greedy:
            self.output_layers = nn.ModuleDict({
                '1': nn.Linear(1024, 10),
                '2': nn.Linear(512, 10),
                '3': nn.Linear(10, 10)
            })
            self._freeze_unused_layers()

    def _freeze_unused_layers(self):
        """G√®le les couches non utilis√©es en mode Greedy"""
        if not self.enable_greedy:
            return
            
        fc_layers = [
            (self.fc1, self.bn_fc1),
            (self.fc2, self.bn_fc2), 
            (self.fc3, None)
        ]
        
        for i, (fc, bn) in enumerate(fc_layers):
            if i >= self.current_fc_depth:
                for param in fc.parameters():
                    param.requires_grad = False
                if bn is not None:
                    for param in bn.parameters():
                        param.requires_grad = False
            else:
                for param in fc.parameters():
                    param.requires_grad = True
                if bn is not None:
                    for param in bn.parameters():
                        param.requires_grad = True
        
        # G√©rer les couches de sortie Greedy
        if hasattr(self, 'output_layers'):
            for key, layer in self.output_layers.items():
                if key == str(self.current_fc_depth):
                    for param in layer.parameters():
                        param.requires_grad = True
                else:
                    for param in layer.parameters():
                        param.requires_grad = False

    def add_greedy_layer(self):
        """Ajoute une couche FC (Greedy Layer-Wise)"""
        if not self.enable_greedy or self.current_fc_depth >= self.max_fc_layers:
            return False
            
        print(f"   üß† Ajout couche FC #{self.current_fc_depth + 1} (Greedy CIFAR-10 de test_fin.py)")
        
        fc_layers = [
            (self.fc1, self.bn_fc1),
            (self.fc2, self.bn_fc2), 
            (self.fc3, None)
        ]
        
        # Geler les couches pr√©c√©dentes
        for i in range(self.current_fc_depth):
            fc, bn = fc_layers[i]
            for param in fc.parameters():
                param.requires_grad = False
            if bn is not None:
                for param in bn.parameters():
                    param.requires_grad = False
        
        self.current_fc_depth += 1
        self._freeze_unused_layers()
        
        return True

    def forward(self, x):
        # üîß FORWARD EXACTEMENT COMME test_fin.py
        # Premier bloc: Conv + BN + ReLU + Pool
        x = self.pool(F.relu(self.bn1(self.conv1(x))))
        
        # Deuxi√®me bloc: Conv + BN + ReLU + Pool
        x = self.pool(F.relu(self.bn2(self.conv2(x))))
        
        # Troisi√®me bloc: Conv + BN + ReLU + Pool
        x = self.pool(F.relu(self.bn3(self.conv3(x))))
        
        # Quatri√®me bloc: Conv + BN + ReLU + Pool
        x = self.pool(F.relu(self.bn4(self.conv4(x))))
        
        # Dropout apr√®s les convolutions
        x = self.dropout(x)
        
        # Aplatissement pour les couches FC
        x = x.view(-1, 512 * 2 * 2)
        
        if self.enable_greedy:
            # Mode Greedy: utiliser seulement les couches actives
            if self.current_fc_depth >= 1:
                x = F.relu(self.bn_fc1(self.fc1(x)))
                x = self.dropout_fc(x)
                if self.current_fc_depth == 1:
                    return self.output_layers['1'](x)
            
            if self.current_fc_depth >= 2:
                x = F.relu(self.bn_fc2(self.fc2(x)))
                x = self.dropout_fc(x)
                if self.current_fc_depth == 2:
                    return self.output_layers['2'](x)
                    
            if self.current_fc_depth >= 3:
                x = self.fc3(x)
                return x
        else:
            # Mode standard: EXACTEMENT comme test_fin.py
            # Premi√®re couche FC avec BN
            x = F.relu(self.bn_fc1(self.fc1(x)))
            x = self.dropout_fc(x)
            
            # Deuxi√®me couche FC avec BN
            x = F.relu(self.bn_fc2(self.fc2(x)))
            x = self.dropout_fc(x)
            
            # Couche de sortie
            x = self.fc3(x)
            
            return x

    def get_greedy_status(self):
        """Retourne le statut du Greedy"""
        return {
            'enabled': self.enable_greedy,
            'current_depth': self.current_fc_depth,
            'max_depth': self.max_fc_layers,
            'can_add_layer': self.current_fc_depth < self.max_fc_layers
        }

# ================================
# FONCTIONS UTILITAIRES POSITIONS & COMMUNICATION
# ================================

def euclidean_distance(pos1, pos2):
    """Calcule la distance euclidienne entre deux positions"""
    return ((pos1[0] - pos2[0]) ** 2 + (pos1[1] - pos2[1]) ** 2) ** 0.5

def get_comm_delay(uav_id, peer_id, uav_positions):
    """Calcule le d√©lai de communication bas√© sur la distance"""
    distance = euclidean_distance(uav_positions[uav_id], uav_positions[peer_id])
    base_delay = 1.0
    delay = base_delay + 0.05 * distance
    return delay

def create_uav_positions(num_uavs, area_size=100, groups=None):
    """G√©n√©ration positions avec clusters g√©ographiquement proches"""
    positions = []
    
    if groups is None:
        return [(random.uniform(0, area_size), random.uniform(0, area_size)) for _ in range(num_uavs)]
    
    # G√©n√©rer des centres de clusters dans la zone
    num_clusters = len(groups)
    cluster_centers = []
    
    # Distribuer les centres de clusters dans la zone
    for i in range(num_clusters):
        if num_clusters == 1:
            center_x = area_size / 2
            center_y = area_size / 2
        elif num_clusters == 2:
            center_x = (i + 1) * area_size / 3
            center_y = area_size / 2
        elif num_clusters == 3:
            # Triangle √©quilat√©ral
            angle = i * 2 * 3.14159 / 3
            radius = area_size / 3
            center_x = area_size / 2 + radius * np.cos(angle)
            center_y = area_size / 2 + radius * np.sin(angle)
        else:
            # Grille pour plus de clusters
            cols = int(np.ceil(np.sqrt(num_clusters)))
            row = i // cols
            col = i % cols
            center_x = (col + 1) * area_size / (cols + 1)
            center_y = (row + 1) * area_size / (cols + 1)
        
        cluster_centers.append((center_x, center_y))
    
    # Cr√©er positions pour chaque cluster
    for cluster_idx, group in enumerate(groups):
        center = cluster_centers[cluster_idx]
        cluster_radius = min(20, area_size / (2 * len(groups)))
        
        for uav_id in group:
            # Position al√©atoire autour du centre du cluster
            angle = random.uniform(0, 2 * 3.14159)
            distance = random.uniform(0, cluster_radius)
            
            x = center[0] + distance * np.cos(angle)
            y = center[1] + distance * np.sin(angle)
            
            # V√©rifier les limites de la zone
            x = max(5, min(area_size - 5, x))
            y = max(5, min(area_size - 5, y))
            
            positions.append((x, y))
    
    return positions

def generate_network_topology_image(positions, groups, filename=None):
    """G√©n√©rer une image PNG de la topologie avec liens de communication"""
    
    if filename is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"topology/network_topology_{timestamp}.png"
    
    os.makedirs('topology', exist_ok=True)
    
    plt.figure(figsize=(12, 10))
    
    colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray', 'olive', 'cyan']
    communication_range = 30.0
    
    # Liens intra-cluster
    for cluster_idx, group in enumerate(groups):
        color = colors[cluster_idx % len(colors)]
        for i, uav_id1 in enumerate(group):
            for uav_id2 in group[i+1:]:
                pos1 = positions[uav_id1]
                pos2 = positions[uav_id2]
                distance = euclidean_distance(pos1, pos2)
                
                if distance <= communication_range:
                    plt.plot([pos1[0], pos2[0]], [pos1[1], pos2[1]], 
                            color=color, linestyle='-', linewidth=1.5, alpha=0.7)
    
    # Centres de clusters
    cluster_centers = []
    for cluster_idx, group in enumerate(groups):
        cluster_positions = [positions[uav_id] for uav_id in group]
        center_x = sum(pos[0] for pos in cluster_positions) / len(cluster_positions)
        center_y = sum(pos[1] for pos in cluster_positions) / len(cluster_positions)
        cluster_centers.append((center_x, center_y))
        
        plt.scatter(center_x, center_y, c='black', s=200, marker='X', 
                   edgecolors='white', linewidth=2, alpha=0.8, zorder=10)
        plt.annotate(f'Centre C{cluster_idx}', (center_x, center_y), 
                    xytext=(10, 10), textcoords='offset points',
                    fontsize=10, fontweight='bold', color='black')
    
    # Liens inter-cluster
    for i in range(len(cluster_centers)):
        for j in range(i+1, len(cluster_centers)):
            center1 = cluster_centers[i]
            center2 = cluster_centers[j]
            plt.plot([center1[0], center2[0]], [center1[1], center2[1]], 
                    color='black', linestyle='--', linewidth=2, alpha=0.6)
    
    # N≈ìuds UAV par cluster
    for cluster_idx, group in enumerate(groups):
        cluster_positions = [positions[uav_id] for uav_id in group]
        x_coords = [pos[0] for pos in cluster_positions]
        y_coords = [pos[1] for pos in cluster_positions]
        
        color = colors[cluster_idx % len(colors)]
        
        plt.scatter(x_coords, y_coords, c=color, s=150, alpha=0.9, 
                   label=f'Cluster {cluster_idx}', edgecolors='black', linewidth=2, zorder=5)
        
        for uav_id, pos in zip(group, cluster_positions):
            plt.annotate(f'UAV-{uav_id}', (pos[0], pos[1]), 
                        xytext=(5, 5), textcoords='offset points',
                        fontsize=9, fontweight='bold', color='black',
                        bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8))
    
    # Cercles de port√©e de communication
    for uav_id, pos in enumerate(positions):
        circle = plt.Circle(pos, communication_range, fill=False, 
                          linestyle=':', alpha=0.2, color='gray', linewidth=1)
        plt.gca().add_patch(circle)
    
    plt.xlabel('Coordonn√©e X (km)', fontsize=14)
    plt.ylabel('Coordonn√©e Y (km)', fontsize=14)
    # üîß TITRE MODIFI√â pour refl√©ter l'utilisation du mod√®le de test_fin.py
    plt.title('Topologie S√©curis√©e TEE + Coefficient Alpha\nArchitecture CIFAR-10 de test_fin.py + Contr√¥le d\'Influence', 
              fontsize=16, fontweight='bold')
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=12)
    plt.grid(True, alpha=0.3)
    plt.axis('equal')
    
    plt.xlim(-5, 105)
    plt.ylim(-5, 75)
    
    info_text = f"""R√©seau UAV S√©curis√© + Alpha:
‚Ä¢ {len(positions)} drones avec TEE
‚Ä¢ {len(groups)} clusters
‚Ä¢ Zone: 100x100 km
‚Ä¢ Port√©e comm: {communication_range} km
‚Ä¢ S√©curit√©: TEE + D√©tection menaces
‚Ä¢ Coefficient Alpha: Contr√¥le d'influence
‚Ä¢ Mod√®le CIFAR-10: Architecture de test_fin.py
‚Ä¢ Simulation: SimPy Environment
‚Ä¢ Liens: ‚Äî Intra-cluster, -- Inter-cluster"""
    
    plt.text(0.02, 0.98, info_text, transform=plt.gca().transAxes, 
             fontsize=10, verticalalignment='top',
             bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
    
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"üó∫Ô∏è Topologie s√©curis√©e avec architecture test_fin.py sauvegard√©e: {filename}")
    return filename

# ================================
# FONCTIONS DATASET ET √âVALUATION
# ================================

def partition_dataset(num_uavs, iid=True, dataset_name="MNIST"):
    """Partitionner le dataset selon IID ou Non-IID"""
    print(f"üì¶ Partitionnement du dataset {dataset_name} ({'IID' if iid else 'Non-IID'})...")
    
    if dataset_name == "MNIST":
        transform = transforms.Compose([transforms.ToTensor()])
        full_dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
    elif dataset_name == "CIFAR-10":
        transform = transforms.Compose([transforms.ToTensor()])
        full_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
    
    if iid:
        data_per_uav = len(full_dataset) // num_uavs
        indices = np.random.permutation(len(full_dataset))
        partitions = []
        
        for i in range(num_uavs):
            start = i * data_per_uav
            end = (i + 1) * data_per_uav if i < num_uavs - 1 else len(full_dataset)
            uav_indices = indices[start:end]
            subset = torch.utils.data.Subset(full_dataset, indices)
            partitions.append(subset)
            
        print(f"   ‚úÖ Distribution IID : {data_per_uav} √©chantillons par UAV")
        
    else:
        targets = np.array(full_dataset.targets)
        sorted_indices = np.argsort(targets)
        
        num_classes = 10
        classes_per_uav = max(1, num_classes // num_uavs)
        
        partitions = []
        for i in range(num_uavs):
            start_class = (i * classes_per_uav) % num_classes
            end_class = ((i + 1) * classes_per_uav) % num_classes
            
            if end_class <= start_class:
                end_class = start_class + 1
            
            uav_indices = []
            for class_id in range(start_class, min(end_class + 1, num_classes)):
                class_indices = sorted_indices[targets[sorted_indices] == class_id]
                samples_per_class = len(class_indices) // (num_uavs // classes_per_uav + 1)
                uav_indices.extend(class_indices[:samples_per_class])
            
            subset = torch.utils.data.Subset(full_dataset, uav_indices)
            partitions.append(subset)
            
        print(f"   ‚úÖ Distribution Non-IID : r√©partition par classes")
    
    return partitions

def load_test_dataset(dataset_name, enable_greedy=False):
    """Charger le dataset de test avec mod√®le CIFAR-10 de test_fin.py"""
    if dataset_name == "MNIST":
        transform = transforms.Compose([transforms.ToTensor()])
        test_dataset = datasets.MNIST(root='./data', train=False, download=True, transform=transform)
        model_class = lambda: CNNModelMNIST(enable_greedy=enable_greedy)
    else:  # CIFAR-10
        transform = transforms.Compose([transforms.ToTensor()])
        test_dataset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)
        # üîß UTILISE L'ARCHITECTURE EXACTE DE test_fin.py avec support Greedy
        model_class = lambda: CNNModelCIFAR10(enable_greedy=enable_greedy)
    
    test_loader = DataLoader(test_dataset, batch_size=256, shuffle=False)
    return test_loader, model_class

def evaluate_model(model_instance, test_loader, device='cpu'):
    """√âvaluer la performance du mod√®le"""
    model_instance.eval()
    
    correct = 0
    total = 0
    
    with torch.no_grad():
        for xb, yb in test_loader:
            xb = xb.to(torch.float32).to(device)
            if len(xb.shape) == 3:
                xb = xb.unsqueeze(1)
            yb = yb.to(device)
            
            outputs = model_instance(xb)
            _, predicted = torch.max(outputs.data, 1)
            total += yb.size(0)
            correct += (predicted == yb).sum().item()
    
    return correct / total

# ================================
# FONCTIONS D'AGR√âGATION AVEC COEFFICIENT ALPHA
# ================================

def weighted_fedavg(models_weights, weights_list):
    """Agr√©gation Weighted FedAvg standard (pour intra-cluster)"""
    if not models_weights:
        return None
        
    total_weight = sum(weights_list)
    if total_weight == 0:
        return None
        
    normalized_weights = [w / total_weight for w in weights_list]
    
    aggregated_weights = {}
    
    for key in models_weights[0].keys():
        aggregated_weights[key] = sum(
            normalized_weights[i] * models_weights[i][key] 
            for i in range(len(models_weights))
        )
    
    return aggregated_weights

def weighted_fedavg_with_alpha(local_model, external_models, external_weights, alpha=0.3):
    """
    Agr√©gation Weighted FedAvg avec coefficient alpha pour les mod√®les externes
    
    Args:
        local_model: Poids du mod√®le local (cluster actuel)
        external_models: Liste des mod√®les des autres clusters
        external_weights: Liste des poids (tailles) des autres clusters
        alpha: Coefficient de r√©duction pour les mod√®les externes (0 < alpha < 1)
    
    Returns:
        Mod√®le agr√©g√© avec influence r√©duite des clusters externes
    """
    if not external_models:
        return local_model
    
    # Calculer le poids total des mod√®les externes
    total_external_weight = sum(external_weights)
    if total_external_weight == 0:
        return local_model
    
    # Normaliser les poids externes
    normalized_external_weights = [w / total_external_weight for w in external_weights]
    
    # Calculer la moyenne pond√©r√©e des mod√®les externes
    external_aggregated = {}
    for key in local_model.keys():
        external_aggregated[key] = sum(
            normalized_external_weights[i] * external_models[i][key]
            for i in range(len(external_models))
        )
    
    # Agr√©gation finale avec coefficient alpha
    final_model = {}
    for key in local_model.keys():
        # Mod√®le final = (1-alpha) * mod√®le_local + alpha * mod√®les_externes_agr√©g√©s
        final_model[key] = (1 - alpha) * local_model[key] + alpha * external_aggregated[key]
    
    return final_model

# ================================
# GESTIONNAIRE DE CLUSTERS
# ================================

class ClusterManager:
    """Gestionnaire des clusters"""
    
    def __init__(self, env, groups, global_results):
        self.env = env
        self.groups = groups
        self.global_results = global_results
        self.cluster_leaders = {}
        
    def elect_cluster_leader(self, cluster_id, round_num):
        """√âlire un chef de cluster pour ce round"""
        cluster_uavs = self.groups[cluster_id]
        leader_index = round_num % len(cluster_uavs)
        leader_id = cluster_uavs[leader_index]
        self.cluster_leaders[cluster_id] = leader_id
        
        return leader_id

# ================================
# CLASSE UAV S√âCURIS√âE AVEC COEFFICIENT ALPHA
# ================================

class SecureUAV:
    """Classe UAV s√©curis√©e avec mod√®le CIFAR-10 de test_fin.py et coefficient alpha"""
    
    def __init__(self, env, uav_id, cluster_id, group_ids, dataset, test_loader, model_class, 
                 protocol, positions, config, global_results, cluster_manager, enable_greedy=False):
        self.env = env
        self.id = uav_id
        self.cluster_id = cluster_id
        self.group_ids = group_ids
        self.dataset = dataset
        self.test_loader = test_loader
        self.model_class = model_class
        self.protocol = protocol
        self.positions = positions
        self.config = config
        self.global_results = global_results
        self.cluster_manager = cluster_manager
        self.enable_greedy = enable_greedy
        
        # Coefficient alpha pour inter-cluster (configurable)
        self.alpha_inter_cluster = config.get('alpha_inter_cluster', 0.3)
        
        # Initialiser le TEE
        self.tee = TEEManager(uav_id, memory_limit=512*1024*1024)
        
        # Initialiser le d√©tecteur de menaces local
        self.threat_detector = LocalThreatDetector(uav_id)
        
        # Initialiser le mod√®le DANS LE TEE
        with self.tee.secure_context():
            self.model = model_class()  # üîß UTILISE LE MOD√àLE CIFAR-10 DE test_fin.py
            self.tee.secure_store(f"model_{uav_id}", self.model)
        
        # Param√®tres Greedy Layer-Wise
        self.greedy_patience = 2
        self.greedy_threshold = 0.01
        self.last_accuracy = 0.0
        self.no_improvement_count = 0
        self.greedy_history = []
        
        # Statistiques
        self.local_losses = []
        self.round_accuracies = []
        self.communication_cost = 0
        self.computational_cost = 0
        self.is_cluster_leader = False
        
        # Statistiques de s√©curit√©
        self.security_stats = {
            'threats_detected': 0,
            'tee_operations': 0,
            'secure_trainings': 0
        }
        
        # D√©marrage du processus
        self.env.process(self.secure_federated_learning_process())

    def secure_local_training(self):
        """Entra√Ænement local s√©curis√© dans TEE avec mod√®le CIFAR-10 de test_fin.py"""
        print(f"   üîí UAV-{self.id}: Entra√Ænement {'Greedy' if self.enable_greedy else 'Standard'} s√©curis√© (CIFAR-10 de test_fin.py)")
        
        with self.tee.secure_context() as tee:
            self.security_stats['secure_trainings'] += 1
            
            self.model.train()
            
            # Optimiseur adapt√© selon architecture de test_fin.py
            if self.enable_greedy:
                optimizer = optim.SGD(
                    filter(lambda p: p.requires_grad, self.model.parameters()), 
                    lr=0.01, momentum=0.9, weight_decay=1e-4
                )
            else:
                optimizer = optim.SGD(
                    self.model.parameters(), 
                    lr=0.01, momentum=0.9
                )
            
            criterion = nn.CrossEntropyLoss()
            loader = DataLoader(self.dataset, batch_size=self.config['batch_size'], shuffle=True)
            
            total_loss = 0.0
            total_batches = 0
            
            for epoch in range(self.config['local_epochs']):
                epoch_loss = 0.0
                epoch_batches = 0
                
                for batch_data, batch_labels in loader:
                    batch_data = batch_data.to(torch.float32)
                    if len(batch_data.shape) == 3:
                        batch_data = batch_data.unsqueeze(1)
                    
                    optimizer.zero_grad()
                    outputs = self.model(batch_data)
                    loss = criterion(outputs, batch_labels)
                    loss.backward()
                    optimizer.step()
                    
                    epoch_loss += loss.item()
                    epoch_batches += 1
                    self.computational_cost += len(batch_data)
                
                avg_epoch_loss = epoch_loss / epoch_batches if epoch_batches > 0 else 0
                total_loss += avg_epoch_loss
                total_batches += 1
                
                # Greedy Logic pour architecture de test_fin.py
                if self.enable_greedy and epoch == self.config['local_epochs'] - 1:
                    current_accuracy = evaluate_model(self.model, self.test_loader)
                    
                    if self._should_add_greedy_layer(current_accuracy):
                        if self.model.add_greedy_layer():
                            self.greedy_history.append({
                                'round': self.global_results.get('current_round', 0),
                                'epoch': epoch,
                                'old_accuracy': self.last_accuracy,
                                'new_depth': self.model.current_fc_depth
                            })
                            print(f"     ‚ö°üîí Couche ajout√©e dans TEE! Nouvelle profondeur: {self.model.current_fc_depth}")
                            
                            # R√©initialiser l'optimiseur pour les nouveaux param√®tres
                            optimizer = optim.SGD(
                                filter(lambda p: p.requires_grad, self.model.parameters()), 
                                lr=0.01, momentum=0.9, weight_decay=1e-4
                            )
                    
                    self.last_accuracy = current_accuracy
            
            tee.secure_store(f"trained_model_{self.id}", self.model.state_dict())
            self.security_stats['tee_operations'] += 1
        
        avg_loss = total_loss / total_batches if total_batches > 0 else 0
        self.local_losses.append(avg_loss)
        
        return avg_loss

    def _should_add_greedy_layer(self, current_accuracy):
        """D√©termine s'il faut ajouter une couche Greedy"""
        if not self.enable_greedy:
            return False
            
        improvement = current_accuracy - self.last_accuracy
        
        if improvement < self.greedy_threshold:
            self.no_improvement_count += 1
        else:
            self.no_improvement_count = 0
            
        should_add = (self.no_improvement_count >= self.greedy_patience and 
                     self.model.current_fc_depth < self.model.max_fc_layers)
        
        if should_add:
            self.no_improvement_count = 0
            
        return should_add

    def get_model_weights(self):
        """R√©cup√©rer les poids du mod√®le DEPUIS TEE"""
        with self.tee.secure_context() as tee:
            weights = {k: v.cpu().clone() for k, v in self.model.state_dict().items()}
            tee.secure_store(f"extracted_weights_{self.id}", "extraction_logged")
            self.security_stats['tee_operations'] += 1
            
        return weights

    def set_model_weights(self, weights):
        """D√©finir les poids du mod√®le DANS TEE avec compatibilit√© test_fin.py"""
        with self.tee.secure_context() as tee:
            current_state = self.model.state_dict()
            
            # Compatibilit√© parfaite avec architecture de test_fin.py
            compatible_weights = {}
            for key, value in weights.items():
                if key in current_state:
                    if current_state[key].shape == value.shape:
                        compatible_weights[key] = value
                    else:
                        # Conserver les poids actuels si incompatible
                        compatible_weights[key] = current_state[key]
                        print(f"   ‚ö†Ô∏è UAV-{self.id}: Incompatibilit√© {key}: {current_state[key].shape} vs {value.shape}")
            
            # Ajouter les cl√©s manquantes depuis l'√©tat actuel
            for key, value in current_state.items():
                if key not in compatible_weights:
                    compatible_weights[key] = value
            
            self.model.load_state_dict(compatible_weights, strict=False)
            tee.secure_store(f"updated_model_{self.id}", "weights_updated")
            self.security_stats['tee_operations'] += 1

    def communicate_with_peers(self):
        """Communication s√©curis√©e avec peers"""
        peer_weights = []
        peer_sizes = []
        peer_ids = []
        
        if self.protocol == "alltoall":
            for peer_id in self.group_ids:
                if peer_id != self.id and peer_id in self.global_results['uavs']:
                    delay = get_comm_delay(self.id, peer_id, self.positions)
                    yield self.env.timeout(delay)
                    
                    weights = self.global_results['uavs'][peer_id].get_model_weights()
                    peer_weights.append(weights)
                    peer_sizes.append(len(self.global_results['uavs'][peer_id].dataset))
                    peer_ids.append(peer_id)
                    
                    # Calcul du co√ªt de communication
                    comm_size = sum(w.numel() * w.element_size() for w in weights.values())
                    self.communication_cost += comm_size
        
        elif self.protocol == "gossip":
            possible_peers = [pid for pid in self.group_ids 
                            if pid != self.id and pid in self.global_results['uavs']]
            if possible_peers:
                peer_id = random.choice(possible_peers)
                
                delay = get_comm_delay(self.id, peer_id, self.positions)
                yield self.env.timeout(delay)
                
                weights = self.global_results['uavs'][peer_id].get_model_weights()
                peer_weights.append(weights)
                peer_sizes.append(len(self.global_results['uavs'][peer_id].dataset))
                peer_ids.append(peer_id)
                
                comm_size = sum(w.numel() * w.element_size() for w in weights.values())
                self.communication_cost += comm_size
        
        # D√©tection locale - PAS de communication suppl√©mentaire
        if peer_weights:
            threats = self.threat_detector.analyze_peer_updates(peer_weights, peer_ids)
            self.security_stats['threats_detected'] += len(threats)
            
            if threats:
                print(f"   üõ°Ô∏è UAV-{self.id}: {len(threats)} menaces d√©tect√©es localement")
        
        return peer_weights, peer_sizes, peer_ids

    def secure_intra_cluster_aggregation(self, peer_weights, peer_sizes, peer_ids):
        """Agr√©gation intra-cluster s√©curis√©e avec filtrage des menaces"""
        if not peer_weights:
            return
        
        # Filtrer les mises √† jour suspectes SANS communication
        threats = self.threat_detector.analyze_peer_updates(peer_weights, peer_ids)
        clean_weights, clean_ids = self.threat_detector.filter_suspicious_updates(
            peer_weights, peer_ids, threats
        )
        
        clean_sizes = []
        for clean_id in clean_ids:
            if clean_id in peer_ids:
                idx = peer_ids.index(clean_id)
                clean_sizes.append(peer_sizes[idx])
        
        all_weights = [self.get_model_weights()] + clean_weights
        all_sizes = [len(self.dataset)] + clean_sizes
        
        with self.tee.secure_context() as tee:
            aggregated_weights = weighted_fedavg(all_weights, all_sizes)
            tee.secure_store(f"aggregated_model_{self.id}", "aggregation_completed")
            self.security_stats['tee_operations'] += 1
        
        if aggregated_weights:
            self.set_model_weights(aggregated_weights)
            
        if threats:
            filtered_count = len(peer_weights) - len(clean_weights)
            print(f"   üîí UAV-{self.id}: Agr√©gation s√©curis√©e - {filtered_count} UAV suspects exclus")

    def inter_cluster_communication(self):
        """Communication inter-clusters s√©curis√©e avec coefficient alpha"""
        if not self.is_cluster_leader:
            return
            
        print(f"   üåêüîí UAV-{self.id} (Chef cluster {self.cluster_id}): Communication inter-clusters s√©curis√©e (Œ±={self.alpha_inter_cluster})")
        
        # Obtenir le mod√®le actuel du cluster (apr√®s agr√©gation intra-cluster)
        local_cluster_model = self.get_model_weights()
        
        other_cluster_models = []
        other_cluster_sizes = []
        other_leader_ids = []
        
        for cluster_idx in range(len(self.cluster_manager.groups)):
            if cluster_idx != self.cluster_id:
                leader_index = self.global_results['current_round'] % len(self.cluster_manager.groups[cluster_idx])
                other_leader_id = self.cluster_manager.groups[cluster_idx][leader_index]
                
                if other_leader_id in self.global_results['uavs']:
                    delay = get_comm_delay(self.id, other_leader_id, self.positions)
                    yield self.env.timeout(delay)
                    
                    other_model = self.global_results['uavs'][other_leader_id].get_model_weights()
                    other_cluster_models.append(other_model)
                    other_leader_ids.append(other_leader_id)
                    
                    other_cluster_size = sum(
                        len(self.global_results['uavs'][uav_id].dataset) 
                        for uav_id in self.cluster_manager.groups[cluster_idx]
                        if uav_id in self.global_results['uavs']
                    )
                    other_cluster_sizes.append(other_cluster_size)
                    
                    comm_size = sum(w.numel() * w.element_size() for w in other_model.values())
                    self.communication_cost += comm_size
        
        # D√©tection de menaces sur les mod√®les inter-clusters + Agr√©gation avec alpha
        if other_cluster_models:
            threats = self.threat_detector.analyze_peer_updates(other_cluster_models, other_leader_ids)
            clean_models, clean_leader_ids = self.threat_detector.filter_suspicious_updates(
                other_cluster_models, other_leader_ids, threats
            )
            
            clean_cluster_sizes = []
            for clean_id in clean_leader_ids:
                if clean_id in other_leader_ids:
                    idx = other_leader_ids.index(clean_id)
                    clean_cluster_sizes.append(other_cluster_sizes[idx])
            
            # Appliquer l'agr√©gation avec coefficient alpha
            with self.tee.secure_context() as tee:
                aggregated_model = weighted_fedavg_with_alpha(
                    local_model=local_cluster_model,
                    external_models=clean_models,
                    external_weights=clean_cluster_sizes,
                    alpha=self.alpha_inter_cluster
                )
                tee.secure_store(f"inter_cluster_alpha_model_{self.id}", "alpha_aggregation_completed")
                self.security_stats['tee_operations'] += 1
            
            if aggregated_model:
                self.set_model_weights(aggregated_model)
                print(f"   ‚úÖüîí Chef {self.id}: Mod√®le mis √† jour avec coefficient Œ±={self.alpha_inter_cluster}")
                print(f"     üí° Influence: {(1-self.alpha_inter_cluster)*100:.1f}% local + {self.alpha_inter_cluster*100:.1f}% externes")

    def broadcast_to_cluster_members(self):
        """Diffuser le mod√®le agr√©g√© aux membres du cluster"""
        if not self.is_cluster_leader:
            return
            
        print(f"   üì°üîí Chef {self.id}: Diffusion du mod√®le agr√©g√© avec Œ± aux membres du cluster {self.cluster_id}")
        
        leader_model = self.get_model_weights()
        
        # Diffuser aux autres membres du cluster
        for member_id in self.group_ids:
            if member_id != self.id and member_id in self.global_results['uavs']:
                # D√©lai de communication intra-cluster
                delay = get_comm_delay(self.id, member_id, self.positions)
                yield self.env.timeout(delay)
                
                # Le membre re√ßoit le mod√®le du chef
                self.global_results['uavs'][member_id].receive_leader_model(leader_model)
                
                # Co√ªt de communication
                comm_size = sum(w.numel() * w.element_size() for w in leader_model.values())
                self.communication_cost += comm_size

    def receive_leader_model(self, leader_model):
        """Recevoir le mod√®le du chef de cluster"""
        if not self.is_cluster_leader:
            self.set_model_weights(leader_model)
            print(f"   üì•üîí UAV-{self.id}: Mod√®le avec coefficient Œ± re√ßu du chef de cluster")

    def secure_federated_learning_process(self):
        """Processus principal d'apprentissage f√©d√©r√© s√©curis√© avec coefficient alpha"""
        
        # Synchronisation initiale
        yield self.env.timeout(0.1)
        
        for round_num in range(self.config['fl_rounds']):
            greedy_status = " (Greedy)" if self.enable_greedy else " (Standard)"
            model_info = " [CIFAR-10 de test_fin.py]" if self.config['dataset'] == 'CIFAR-10' else " [MNIST]"
            print(f"üîÑüîí UAV-{self.id}: Round s√©curis√© {round_num + 1}/{self.config['fl_rounds']}{greedy_status}{model_info}")
            
            self.global_results['current_round'] = round_num
            
            # √âlection du chef de cluster
            leader_id = self.cluster_manager.elect_cluster_leader(self.cluster_id, round_num)
            self.is_cluster_leader = (self.id == leader_id)
            
            if self.is_cluster_leader:
                print(f"   üëëüîí UAV-{self.id}: Chef s√©curis√© du cluster {self.cluster_id} (Œ±={self.alpha_inter_cluster})")
            
            # 1. Entra√Ænement local s√©curis√© avec mod√®le de test_fin.py
            local_loss = self.secure_local_training()
            
            # Synchronisation avant communication
            yield self.env.timeout(0.5)
            
            # 2. Communication intra-cluster s√©curis√©e
            peer_weights, peer_sizes, peer_ids = yield from self.communicate_with_peers()
            
            # 3. Agr√©gation intra-cluster s√©curis√©e
            self.secure_intra_cluster_aggregation(peer_weights, peer_sizes, peer_ids)
            
            # Synchronisation avant inter-cluster
            yield self.env.timeout(0.2)
            
            # 4. Communication inter-clusters s√©curis√©e AVEC COEFFICIENT ALPHA
            if self.is_cluster_leader:
                yield from self.inter_cluster_communication()
                
                # 5. Diffusion aux membres du cluster
                yield from self.broadcast_to_cluster_members()
            else:
                # Les non-chefs attendent de recevoir le mod√®le du chef
                yield self.env.timeout(1.0)
            
            # Synchronisation finale
            yield self.env.timeout(0.2)
            
            # √âvaluation du mod√®le
            accuracy = evaluate_model(self.model, self.test_loader)
            self.round_accuracies.append(accuracy)
            
            # Enregistrer les r√©sultats
            result_entry = {
                'uav_id': self.id,
                'round': round_num,
                'accuracy': accuracy,
                'loss': local_loss,
                'is_leader': self.is_cluster_leader,
                'greedy_enabled': self.enable_greedy,
                'tee_enabled': True,
                'alpha_inter_cluster': self.alpha_inter_cluster,
                'alpha_used': self.alpha_inter_cluster if self.is_cluster_leader else None,
                'threats_detected': self.security_stats['threats_detected'],
                'tee_operations': self.security_stats['tee_operations'],
                'model_from_test_fin': self.config['dataset'] == 'CIFAR-10'
            }
            
            if self.enable_greedy:
                greedy_status = self.model.get_greedy_status()
                result_entry.update({
                    'greedy_depth': greedy_status['current_depth'],
                    'greedy_max_depth': greedy_status['max_depth'],
                    'greedy_history_count': len(self.greedy_history)
                })
            
            self.global_results['all_accuracies'].append(result_entry)
            
            # Affichage des r√©sultats avec info mod√®le de test_fin.py + alpha
            leader_status = f" (CHEF Œ±={self.alpha_inter_cluster})" if self.is_cluster_leader else ""
            if self.enable_greedy:
                greedy_info = f" [Greedy FC:{self.model.current_fc_depth}/{self.model.max_fc_layers}]"
            else:
                greedy_info = " [Standard]"
            
            model_status = " [CIFAR-10 de test_fin.py]" if self.config['dataset'] == 'CIFAR-10' else " [MNIST]"
            security_info = f" [TEE:{self.security_stats['tee_operations']}ops, Menaces:{self.security_stats['threats_detected']}]"
            
            print(f"   üìäüîí Loss: {local_loss:.4f}, Accuracy: {accuracy:.4f}{leader_status}{greedy_info}{model_status}{security_info}")

    def get_security_report(self):
        """G√©n√®re un rapport de s√©curit√© complet avec alpha"""
        tee_status = self.tee.get_security_status()
        
        return {
            'uav_id': self.id,
            'tee_status': tee_status,
            'security_stats': self.security_stats,
            'alpha_inter_cluster': self.alpha_inter_cluster,
            'greedy_history': self.greedy_history if self.enable_greedy else None,
            'model_from_test_fin': self.config['dataset'] == 'CIFAR-10'
        }

# ================================
# FONCTIONS DE SIMULATION
# ================================

def create_uav_groups(num_uavs, num_clusters):
    """Cr√©er des groupes d'UAV"""
    uavs_per_cluster = num_uavs // num_clusters
    groups = []
    
    for cluster_id in range(num_clusters):
        start_idx = cluster_id * uavs_per_cluster
        end_idx = (cluster_id + 1) * uavs_per_cluster
        if cluster_id == num_clusters - 1:
            end_idx = num_uavs
        
        group = list(range(start_idx, end_idx))
        groups.append(group)
    
    return groups

# ================================
# G√âN√âRATION AM√âLIOR√âE DE FICHIERS ET GRAPHIQUES
# ================================

def generate_results_files(results):
    """G√©n√©rer les fichiers de r√©sultats en TXT et JSON - Version am√©lior√©e"""
    
    os.makedirs('results', exist_ok=True)
    
    scenario_name = results['scenario_name']
    timestamp = results['timestamp']
    
    # Fichier TXT d√©taill√© avec toutes les m√©triques
    txt_filename = f"results/results_{scenario_name}_{timestamp}.txt"
    with open(txt_filename, 'w', encoding='utf-8') as f:
        f.write("=" * 90 + "\n")
        f.write("üöÅ R√âSULTATS DFL S√âCURIS√â + GREEDY + COEFFICIENT ALPHA + MOD√àLE test_fin.py\n")
        f.write("üîß AVEC ARCHITECTURE CIFAR-10 EXACTE DE test_fin.py + FONCTIONNALIT√âS AVANC√âES\n")
        f.write("=" * 90 + "\n\n")
        
        f.write(f"üìÖ Date/Heure: {timestamp}\n")
        f.write(f"üéØ Sc√©nario: {scenario_name}\n")
        f.write(f"üó∫Ô∏è Topologie: {results.get('topology_filename', 'N/A')}\n\n")
        
        f.write("üìã CONFIGURATION:\n")
        f.write(f"  ‚Ä¢ Dataset: {results['config']['dataset']}\n")
        f.write(f"  ‚Ä¢ Distribution: {'IID' if results['config']['iid'] else 'Non-IID'}\n")
        f.write(f"  ‚Ä¢ Protocole: {results['config']['protocol'].upper()}\n")
        f.write(f"  ‚Ä¢ Nombre d'UAVs: {results['config']['num_uavs']}\n")
        f.write(f"  ‚Ä¢ Nombre de clusters: {results['config']['num_clusters']}\n")
        f.write(f"  ‚Ä¢ Rounds FL: {results['config']['fl_rounds']}\n")
        f.write(f"  ‚Ä¢ √âpoques locales: {results['config']['local_epochs']}\n")
        f.write(f"  ‚Ä¢ Batch size: {results['config']['batch_size']}\n")
        f.write(f"  ‚Ä¢ S√©curit√© TEE: {'‚úÖ ACTIV√âE' if results.get('tee_enabled', False) else '‚ùå D√âSACTIV√âE'}\n")
        f.write(f"  ‚Ä¢ D√©tection menaces: {'‚úÖ ACTIV√âE' if results.get('security_enabled', False) else '‚ùå D√âSACTIV√âE'}\n")
        f.write(f"  ‚Ä¢ Greedy Layer-Wise: {'‚úÖ ACTIV√â' if results['greedy_enabled'] else '‚ùå D√âSACTIV√â'}\n")
        
        # Afficher le coefficient alpha s'il existe
        if 'alpha_inter_cluster' in results['config']:
            alpha = results['config']['alpha_inter_cluster']
            f.write(f"  üìä ‚Ä¢ Coefficient Alpha: {alpha}\n")
            f.write(f"  üìä ‚Ä¢ Influence locale: {(1-alpha)*100:.1f}%\n")
            f.write(f"  üìä ‚Ä¢ Influence externe: {alpha*100:.1f}%\n")
        
        f.write(f"  üîß ‚Ä¢ Mod√®le CIFAR-10: {'‚úÖ Architecture exacte de test_fin.py' if results.get('model_from_test_fin', False) else '‚ùå Standard'}\n")
        f.write(f"  üÜï ‚Ä¢ Simulation: SimPy Environment temporelle\n")
        f.write(f"  üÜï ‚Ä¢ Positions: G√©n√©r√©es automatiquement (100x100 km)\n")
        f.write(f"  üÜï ‚Ä¢ Communication: D√©lais bas√©s sur distance euclidienne\n")
        f.write(f"  üÜï ‚Ä¢ Topologie: PNG g√©n√©r√©e automatiquement\n\n")
        
        f.write("üìä R√âSULTATS PRINCIPAUX:\n")
        f.write(f"  ‚Ä¢ Pr√©cision finale moyenne: {results['final_average_accuracy']:.4f} ({results['final_average_accuracy']*100:.2f}%)\n")
        f.write(f"  ‚Ä¢ Temps total d'ex√©cution: {results['simulation_time']:.2f} secondes\n")
        f.write(f"  ‚Ä¢ Co√ªt total communication: {results['total_communication_cost'] / 1024:.2f} KB\n")
        f.write(f"  ‚Ä¢ Co√ªt total computationnel: {results['total_computational_cost']}\n\n")
        
        # Statistiques de s√©curit√© si disponibles
        if results.get('tee_enabled', False):
            f.write("üîí STATISTIQUES DE S√âCURIT√â:\n")
            f.write(f"  ‚Ä¢ Op√©rations TEE totales: {results.get('total_tee_operations', 0)}\n")
            f.write(f"  ‚Ä¢ Menaces d√©tect√©es totales: {results.get('total_threats_detected', 0)}\n")
            f.write(f"  ‚Ä¢ UAVs avec TEE: {results['config']['num_uavs']}/100% (tous s√©curis√©s)\n")
            f.write(f"  ‚Ä¢ D√©tection locale: ‚úÖ (pas de communication suppl√©mentaire)\n\n")
        
        # Statistiques du coefficient alpha si disponible
        if 'alpha_inter_cluster' in results['config']:
            alpha = results['config']['alpha_inter_cluster']
            f.write("üìä STATISTIQUES DU COEFFICIENT ALPHA:\n")
            f.write(f"  ‚Ä¢ Coefficient utilis√©: {alpha}\n")
            f.write(f"  ‚Ä¢ Formule: (1-Œ±) √ó Local + Œ± √ó Externes\n")
            f.write(f"  ‚Ä¢ Pr√©servation identit√© cluster: {(1-alpha)*100:.1f}%\n")
            f.write(f"  ‚Ä¢ Collaboration inter-cluster: {alpha*100:.1f}%\n")
            
            # Utilisation par round si disponible
            if 'alpha_usage_stats' in results:
                f.write(f"  ‚Ä¢ Utilisation par round:\n")
                for round_num, alpha_users in results['alpha_usage_stats'].items():
                    if alpha_users:
                        f.write(f"    Round {int(round_num) + 1}: ")
                        for user in alpha_users:
                            f.write(f"UAV-{user['uav_id']}(Œ±={user['alpha']}) ")
                        f.write("\n")
            f.write("\n")
        
        # Architecture du mod√®le si c'est CIFAR-10 de test_fin.py
        if results.get('model_from_test_fin', False):
            f.write("üîß ARCHITECTURE MOD√àLE CIFAR-10 DE test_fin.py:\n")
            f.write(f"  ‚Ä¢ Source: Architecture exacte copi√©e de test_fin.py\n")
            f.write(f"  ‚Ä¢ Compatibilit√©: 100% identique √† test_fin.py\n")
            f.write(f"  ‚Ä¢ Performance: Identique √† test_fin.py\n")
            f.write(f"  ‚Ä¢ Couches convolutionnelles: 4 (3->64->128->256->512)\n")
            f.write(f"  ‚Ä¢ Couches FC: 3 (512*2*2 -> 1024 -> 512 -> 10)\n")
            f.write(f"  ‚Ä¢ BatchNorm: Optimis√© pour convergence\n")
            f.write(f"  ‚Ä¢ Support Greedy: Ajout√© sans modification du core\n")
            f.write(f"  ‚Ä¢ Compatibilit√© TEE: Int√©gr√©e parfaitement\n\n")
        
        f.write("üìà √âVOLUTION DE LA PR√âCISION PAR ROUND:\n")
        for i, acc in enumerate(results['average_accuracy_per_round']):
            f.write(f"  Round {i+1}: {acc:.4f} ({acc*100:.2f}%)\n")
        f.write("\n")
        
        # Statistiques de leadership si disponibles
        if 'leadership_stats' in results:
            f.write("üè¢ STATISTIQUES DE LEADERSHIP:\n")
            for round_num, leaders in results['leadership_stats'].items():
                f.write(f"  ‚Ä¢ Round {int(round_num)+1}: Chefs - {leaders}\n")
            f.write("\n")
        
        # Co√ªts par UAV
        f.write("üí∞ CO√õTS PAR UAV:\n")
        for i, (comm_cost, comp_cost) in enumerate(zip(results['uav_communication_costs'], results['uav_computational_costs'])):
            f.write(f"  UAV-{i}: Communication {comm_cost/1024:.2f} KB, Computation {comp_cost}\n")
        f.write("\n")
        
        # Statistiques Greedy si activ√©
        if results['greedy_enabled'] and 'total_greedy_additions' in results:
            f.write("üß† STATISTIQUES GREEDY LAYER-WISE:\n")
            f.write(f"  ‚Ä¢ Ajouts totaux de couches: {results['total_greedy_additions']}\n")
            if 'greedy_uav_stats' in results:
                for uav_id, stats in results['greedy_uav_stats'].items():
                    f.write(f"  ‚Ä¢ UAV-{uav_id}: Profondeur finale {stats['final_depth']}/{stats['max_depth']}, {stats['additions_count']} ajouts\n")
            f.write("\n")
        
        f.write("üéØ VERSION HARMONIS√âE - ARCHITECTURE UNIFI√âE:\n")
        f.write(f"  ‚Ä¢ Architecture: {'Architecture exacte de test_fin.py' if results.get('model_from_test_fin', False) else 'Standard'}\n")
        f.write(f"  ‚Ä¢ Harmonisation: {'test_fin.py et test_dfl_tee.py utilisent le m√™me mod√®le CIFAR-10' if results.get('model_from_test_fin', False) else 'Architecture standard'}\n")
        f.write(f"  ‚Ä¢ S√©curit√©: {'TEE + D√©tection menaces locale' if results.get('tee_enabled', False) else 'Standard'}\n")
        f.write(f"  ‚Ä¢ Optimisation: {'Greedy Layer-Wise adaptatif' if results['greedy_enabled'] else 'Standard'}\n")
        if 'alpha_inter_cluster' in results['config']:
            f.write(f"  ‚Ä¢ Contr√¥le d'influence: Coefficient Alpha {results['config']['alpha_inter_cluster']}\n")
        f.write(f"  ‚Ä¢ Communication: Co√ªt optimis√© selon protocole\n")
        f.write(f"  üÜï Positions UAV: G√©n√©r√©es automatiquement\n")
        f.write(f"  üÜï D√©lais communication: Distance euclidienne\n")
        f.write(f"  üÜï Simulation temporelle: SimPy Environment\n")
        f.write(f"  üÜï Topologie visuelle: PNG g√©n√©r√©e automatiquement\n")
        if results.get('model_from_test_fin', False):
            f.write(f"  üîß Mod√®le CIFAR-10: Architecture exacte de test_fin.py\n")
            f.write(f"  ‚ö° Compatibilit√©: 100% avec test_fin.py\n")
            f.write(f"  ü§ù Harmonisation: Codes unifi√©s pour maintenance\n")
        if 'alpha_inter_cluster' in results['config']:
            f.write(f"  üéØ Contr√¥le d'influence: Pr√©servation identit√© clusters\n")
            f.write(f"  ü§ù Collaboration: Contr√¥l√©e par coefficient alpha\n")
        f.write(f"  ‚Ä¢ Performance globale: Maximis√©e par toutes les optimisations\n")
    
    # Fichier JSON pour analyse programmatique
    json_filename = f"results/results_{scenario_name}_{timestamp}.json"
    
    json_data = {
        'scenario_name': scenario_name,
        'timestamp': timestamp,
        'config': results['config'],
        'final_average_accuracy': float(results['final_average_accuracy']),
        'simulation_time': float(results['simulation_time']),
        'total_communication_cost': float(results['total_communication_cost']),
        'total_computational_cost': int(results['total_computational_cost']),
        'average_accuracy_per_round': [float(x) for x in results['average_accuracy_per_round']],
        'uav_communication_costs': [float(x) for x in results['uav_communication_costs']],
        'uav_computational_costs': [int(x) for x in results['uav_computational_costs']],
        'uav_final_accuracies': [float(x) for x in results['uav_final_accuracies']],
        'greedy_enabled': results['greedy_enabled'],
        'tee_enabled': results.get('tee_enabled', False),
        'security_enabled': results.get('security_enabled', False),
        'alpha_enabled': results.get('alpha_enabled', False),
        'model_from_test_fin': results.get('model_from_test_fin', False),
        'architecture_harmonized': results.get('architecture_harmonized', False),
        'topology_filename': results.get('topology_filename', 'N/A')
    }
    
    # Ajouter les statistiques sp√©ciales si disponibles
    if 'leadership_stats' in results:
        json_data['leadership_stats'] = {str(k): v for k, v in results['leadership_stats'].items()}
    
    if 'alpha_usage_stats' in results:
        json_data['alpha_usage_stats'] = {str(k): v for k, v in results['alpha_usage_stats'].items()}
    
    if results['greedy_enabled'] and 'total_greedy_additions' in results:
        json_data['total_greedy_additions'] = results['total_greedy_additions']
        if 'greedy_uav_stats' in results:
            json_data['greedy_uav_stats'] = results['greedy_uav_stats']
    
    if results.get('tee_enabled', False):
        json_data['total_tee_operations'] = results.get('total_tee_operations', 0)
        json_data['total_threats_detected'] = results.get('total_threats_detected', 0)
        if 'security_reports' in results:
            json_data['security_reports'] = results['security_reports']
    
    if 'positions' in results:
        json_data['positions'] = [[float(pos[0]), float(pos[1])] for pos in results['positions']]
    
    if 'groups' in results:
        json_data['groups'] = results['groups']
    
    with open(json_filename, 'w', encoding='utf-8') as f:
        json.dump(json_data, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ Fichiers de r√©sultats g√©n√©r√©s:")
    print(f"   üìù {txt_filename}")
    print(f"   üìã {json_filename}")
    
    return txt_filename, json_filename

def generate_graphs(results):
    """G√©n√©rer les graphiques automatiquement - Version compl√®te"""
    
    os.makedirs('graphs', exist_ok=True)
    
    scenario_name = results['scenario_name']
    timestamp = results['timestamp']
    
    plt.style.use('default')
    plt.rcParams['figure.figsize'] = (12, 8)
    plt.rcParams['font.size'] = 12
    
    generated_graphs = []
    
    # 1. Graphique principal - √âvolution de l'accuracy
    plt.figure(figsize=(14, 10))
    rounds = list(range(1, len(results['average_accuracy_per_round']) + 1))
    accuracy_percent = [acc * 100 for acc in results['average_accuracy_per_round']]
    
    # Couleur et label selon les caract√©ristiques
    if results.get('model_from_test_fin', False):
        color = 'purple'
        label_base = f"DFL ({'Greedy' if results['greedy_enabled'] else 'Standard'})"
        if 'alpha_inter_cluster' in results['config']:
            alpha = results['config']['alpha_inter_cluster']
            label_base += f" + Œ±={alpha}"
        label_base += " (CIFAR-10 test_fin.py)"
    else:
        color = 'green' if results['greedy_enabled'] else 'blue'
        label_base = f"DFL ({'Greedy' if results['greedy_enabled'] else 'Standard'})"
        if 'alpha_inter_cluster' in results['config']:
            alpha = results['config']['alpha_inter_cluster']
            label_base += f" + Œ±={alpha}"
    
    if results.get('tee_enabled', False):
        label_base += " + TEE S√©curis√©"
    
    plt.plot(rounds, accuracy_percent, f'{color[0]}-o', linewidth=3, markersize=8, label=label_base)
    plt.xlabel('Rounds d\'entra√Ænement', fontsize=14, fontweight='bold')
    plt.ylabel('Pr√©cision (%)', fontsize=14, fontweight='bold')
    
    # Titre dynamique
    title = f'√âvolution Pr√©cision DFL'
    if results.get('model_from_test_fin', False):
        title += ' + Architecture test_fin.py'
    title += f' - {scenario_name}'
    plt.title(title, fontsize=16, fontweight='bold')
    
    plt.grid(True, alpha=0.3)
    plt.legend(fontsize=12)
    
    # Annotations intelligentes
    if accuracy_percent:
        max_acc = max(accuracy_percent)
        max_round = accuracy_percent.index(max_acc) + 1
        annotation_text = f'Max: {max_acc:.2f}%'
        
        if results.get('model_from_test_fin', False):
            annotation_text += '\nüîß Architecture test_fin.py'
        if 'alpha_inter_cluster' in results['config']:
            alpha = results['config']['alpha_inter_cluster']
            annotation_text += f'\nüìä Œ±={alpha}'
        if results.get('tee_enabled', False):
            annotation_text += '\nüîí TEE S√©curis√©'
        
        plt.annotate(annotation_text, 
                    xy=(max_round, max_acc), 
                    xytext=(max_round + 1, max_acc + 1),
                    arrowprops=dict(arrowstyle='->', color='red'),
                    fontsize=11, color='red', fontweight='bold')
    
    # Informations compl√®tes dans le coin
    info_text = f"Dataset: {results['config']['dataset']}\n"
    info_text += f"UAVs: {results['config']['num_uavs']}, Clusters: {results['config']['num_clusters']}\n"
    if results.get('tee_enabled', False):
        info_text += f"üîí TEE: {results.get('total_tee_operations', 0)} ops\n"
        info_text += f"üõ°Ô∏è Menaces: {results.get('total_threats_detected', 0)}\n"
    if 'alpha_inter_cluster' in results['config']:
        alpha = results['config']['alpha_inter_cluster']
        info_text += f"üìä Alpha: {alpha} ({(1-alpha)*100:.0f}%L+{alpha*100:.0f}%E)\n"
    if results['greedy_enabled'] and 'total_greedy_additions' in results:
        info_text += f"üß† Greedy: {results['total_greedy_additions']} ajouts\n"
    if results.get('model_from_test_fin', False):
        info_text += f"üîß Architecture: test_fin.py\n"
    info_text += f"üì° Comm: {results['total_communication_cost']/1024:.1f} KB\n"
    info_text += f"‚è±Ô∏è Temps: {results['simulation_time']:.1f}s"
    
    plt.text(0.02, 0.98, info_text, transform=plt.gca().transAxes, 
             fontsize=10, verticalalignment='top', 
             bbox=dict(boxstyle='round', facecolor='lightyellow', alpha=0.8))
    
    plt.tight_layout()
    acc_filename = f"graphs/accuracy_{scenario_name}_{timestamp}.png"
    plt.savefig(acc_filename, dpi=300, bbox_inches='tight')
    plt.close()
    generated_graphs.append(acc_filename)
    
    # 2. Graphique des m√©triques principales (comme dans l'exemple)
    plt.figure(figsize=(16, 12))
    
    # Subplot 1: M√©triques principales
    plt.subplot(2, 2, 1)
    metrics = ['Pr√©cision\n(%)', 'Temps\n(min)', 'Comm.\n(MB)', 'Clusters\n(nb)']
    values = [
        results['final_average_accuracy'] * 100,
        results['simulation_time'] / 60,
        results['total_communication_cost'] / (1024 * 1024),
        results['config']['num_clusters']
    ]
    colors = ['green', 'blue', 'orange', 'red']
    
    bars = plt.bar(metrics, values, color=colors, alpha=0.7)
    plt.title('M√©triques Principales DFL', fontsize=14, fontweight='bold')
    
    # Ajouter les valeurs sur les barres
    for bar, value in zip(bars, values):
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + max(values)*0.01,
                f'{value:.1f}', ha='center', va='bottom', fontweight='bold')
    
    # Subplot 2: Distribution des pr√©cisions finales
    plt.subplot(2, 2, 2)
    plt.hist(results['uav_final_accuracies'], bins=10, alpha=0.7, color='lightgreen', edgecolor='black')
    mean_acc = np.mean(results['uav_final_accuracies']) * 100
    plt.axvline(np.mean(results['uav_final_accuracies']), color='red', linestyle='--', linewidth=2, 
                label=f'Moyenne: {mean_acc:.1f}%')
    plt.xlabel('Pr√©cision Finale (%)', fontsize=12)
    plt.ylabel('Nombre d\'UAVs', fontsize=12)
    plt.title('Distribution des Pr√©cisions Finales', fontsize=14, fontweight='bold')
    plt.legend()
    
    # Subplot 3: Leadership par round
    plt.subplot(2, 2, 3)
    if 'leadership_stats' in results:
        rounds_leadership = list(results['leadership_stats'].keys())
        num_leaders_per_round = [len(results['leadership_stats'][round_key]) for round_key in rounds_leadership]
        plt.bar(range(len(rounds_leadership)), num_leaders_per_round, color='gold', alpha=0.7)
        plt.xlabel('Round', fontsize=12)
        plt.ylabel('Nombre de Chefs', fontsize=12)
        plt.title('Chefs de Cluster par Round', fontsize=14, fontweight='bold')
        plt.xticks(range(len(rounds_leadership)), [f'{int(r)+1}' for r in rounds_leadership])
        
        # Ajouter les valeurs
        for i, v in enumerate(num_leaders_per_round):
            plt.text(i, v + 0.05, str(v), ha='center', va='bottom', fontweight='bold')
    
    # Subplot 4: √âvolution de la pr√©cision
    plt.subplot(2, 2, 4)
    plt.plot(rounds, accuracy_percent, 'go-', linewidth=2, markersize=6)
    plt.xlabel('Rounds', fontsize=12)
    plt.ylabel('Pr√©cision (%)', fontsize=12)
    plt.title('√âvolution de la Pr√©cision', fontsize=14, fontweight='bold')
    plt.grid(True, alpha=0.3)
    
    # Ajouter annotation du maximum
    if accuracy_percent:
        max_acc = max(accuracy_percent)
        max_round = accuracy_percent.index(max_acc) + 1
        plt.annotate(f'Max: {max_acc:.1f}%', 
                    xy=(max_round, max_acc), 
                    xytext=(max_round + 1, max_acc - 2),
                    arrowprops=dict(arrowstyle='->', color='red'),
                    fontsize=10, color='red')
    
    plt.tight_layout()
    metrics_filename = f"graphs/metrics_{scenario_name}_{timestamp}.png"
    plt.savefig(metrics_filename, dpi=300, bbox_inches='tight')
    plt.close()
    generated_graphs.append(metrics_filename)
    
    # 3. Graphique des co√ªts de communication par UAV
    plt.figure(figsize=(14, 8))
    uav_ids = list(range(results['config']['num_uavs']))
    comm_costs_kb = [cost / 1024 for cost in results['uav_communication_costs']]
    
    plt.bar(uav_ids, comm_costs_kb, color='lightblue', alpha=0.7, edgecolor='navy')
    plt.xlabel('UAV ID', fontsize=14, fontweight='bold')
    plt.ylabel('Co√ªt de Communication (KB)', fontsize=14, fontweight='bold')
    plt.title(f'Co√ªt de Communication par UAV - {scenario_name}', fontsize=16, fontweight='bold')
    plt.grid(True, alpha=0.3, axis='y')
    
    # Ligne de moyenne
    mean_comm = np.mean(comm_costs_kb)
    plt.axhline(y=mean_comm, color='red', linestyle='--', linewidth=2, 
                label=f'Moyenne: {mean_comm:.1f} KB')
    plt.legend(fontsize=12)
    
    # Ajouter valeurs sur quelques barres
    for i in range(0, len(uav_ids), max(1, len(uav_ids)//5)):
        plt.text(i, comm_costs_kb[i] + max(comm_costs_kb)*0.01, 
                f'{comm_costs_kb[i]:.1f}', ha='center', va='bottom', fontsize=9)
    
    plt.tight_layout()
    comm_filename = f"graphs/communication_{scenario_name}_{timestamp}.png"
    plt.savefig(comm_filename, dpi=300, bbox_inches='tight')
    plt.close()
    generated_graphs.append(comm_filename)
    
    # 4. Graphique des co√ªts computationnels par UAV
    plt.figure(figsize=(14, 8))
    comp_costs = results['uav_computational_costs']
    
    plt.bar(uav_ids, comp_costs, color='lightcoral', alpha=0.7, edgecolor='darkred')
    plt.xlabel('UAV ID', fontsize=14, fontweight='bold')
    plt.ylabel('Co√ªt Computationnel (√©chantillons trait√©s)', fontsize=14, fontweight='bold')
    plt.title(f'Co√ªt Computationnel par UAV - {scenario_name}', fontsize=16, fontweight='bold')
    plt.grid(True, alpha=0.3, axis='y')
    
        # Ligne de moyenne
    mean_comp = np.mean(comp_costs)
    plt.axhline(y=mean_comp, color='blue', linestyle='--', linewidth=2, 
                label=f'Moyenne: {mean_comp:,}')
    plt.legend(fontsize=12)
    
    plt.tight_layout()
    comp_filename = f"graphs/computation_{scenario_name}_{timestamp}.png"
    plt.savefig(comp_filename, dpi=300, bbox_inches='tight')
    plt.close()
    generated_graphs.append(comp_filename)
    
    # 5. Graphique des positions UAV avec topologie si disponible
    if 'positions' in results and 'groups' in results:
        plt.figure(figsize=(14, 10))
        
        colors_clusters = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'gray', 'olive', 'cyan']
        
        # Dessiner les positions des UAVs par cluster
        for cluster_idx, group in enumerate(results['groups']):
            cluster_positions = [results['positions'][uav_id] for uav_id in group]
            x_coords = [pos[0] for pos in cluster_positions]
            y_coords = [pos[1] for pos in cluster_positions]
            
            color = colors_clusters[cluster_idx % len(colors_clusters)]
            
            # Dessiner les UAVs
            plt.scatter(x_coords, y_coords, c=color, s=150, alpha=0.8, 
                       label=f'Cluster {cluster_idx}', edgecolors='black', linewidth=2)
            
            # Ajouter les IDs des UAVs
            for uav_id, pos in zip(group, cluster_positions):
                plt.annotate(f'UAV-{uav_id}', (pos[0], pos[1]), 
                            xytext=(5, 5), textcoords='offset points',
                            fontsize=9, fontweight='bold')
        
        plt.xlabel('Position X (km)', fontsize=14, fontweight='bold')
        plt.ylabel('Position Y (km)', fontsize=14, fontweight='bold')
        
        title = f'Positions UAV'
        if results.get('tee_enabled', False):
            title += ' S√©curis√©es'
        if results.get('model_from_test_fin', False):
            title += ' + Architecture test_fin.py'
        if 'alpha_inter_cluster' in results['config']:
            alpha = results['config']['alpha_inter_cluster']
            title += f' Œ±={alpha}'
        title += f' - {scenario_name}'
        
        plt.title(title, fontsize=16, fontweight='bold')
        plt.legend(fontsize=10)
        plt.grid(True, alpha=0.3)
        
        # Ajouter des informations compl√®tes
        info_text = f"""R√©seau UAV:
‚Ä¢ {len(results['positions'])} drones
‚Ä¢ {len(results['groups'])} clusters
‚Ä¢ Zone: 100x100 km"""
        
        if results.get('tee_enabled', False):
            info_text += f"\n‚Ä¢ TEE: {results.get('total_tee_operations', 0)} op√©rations"
            info_text += f"\n‚Ä¢ Menaces: {results.get('total_threats_detected', 0)} d√©tect√©es"
        
        if 'alpha_inter_cluster' in results['config']:
            alpha = results['config']['alpha_inter_cluster']
            info_text += f"\n‚Ä¢ Alpha: {alpha} ({(1-alpha)*100:.0f}%L+{alpha*100:.0f}%E)"
        
        if results.get('model_from_test_fin', False):
            info_text += f"\n‚Ä¢ Architecture: test_fin.py CIFAR-10"
        
        info_text += f"\n‚Ä¢ Simulation: SimPy Environment"
        
        plt.text(0.02, 0.98, info_text, transform=plt.gca().transAxes, 
                 fontsize=11, verticalalignment='top',
                 bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
        
        plt.tight_layout()
        pos_filename = f"graphs/positions_{scenario_name}_{timestamp}.png"
        plt.savefig(pos_filename, dpi=300, bbox_inches='tight')
        plt.close()
        generated_graphs.append(pos_filename)
    
    print(f"üìà Graphiques g√©n√©r√©s:")
    for graph in generated_graphs:
        print(f"   üìä {graph}")
    
    return generated_graphs

def enhanced_collect_results(uavs, config, positions, groups, simulation_time, global_results, enable_greedy=False):
    """Version am√©lior√©e de collect_results avec toutes les statistiques"""
    
    # Calcul des pr√©cisions moyennes par round
    average_accuracy_per_round = []
    for round_num in range(config['fl_rounds']):
        round_accuracies = [
            acc['accuracy'] for acc in global_results['all_accuracies'] 
            if acc['round'] == round_num
        ]
        if round_accuracies:
            average_accuracy_per_round.append(np.mean(round_accuracies))
    
    # Statistiques des UAVs
    uav_communication_costs = [uav.communication_cost for uav in uavs]
    uav_computational_costs = [uav.computational_cost for uav in uavs]
    uav_final_accuracies = [uav.round_accuracies[-1] if uav.round_accuracies else 0 for uav in uavs]
    
    # Statistiques de s√©curit√© si TEE activ√©
    total_tee_operations = 0
    total_threats_detected = 0
    security_reports = []
    
    if hasattr(uavs[0], 'security_stats'):  # V√©rifier si TEE est activ√©
        total_tee_operations = sum(uav.security_stats['tee_operations'] for uav in uavs)
        total_threats_detected = sum(uav.security_stats['threats_detected'] for uav in uavs)
        security_reports = [uav.get_security_report() for uav in uavs if hasattr(uav, 'get_security_report')]
    
    # Statistiques Greedy si activ√©
    total_greedy_additions = 0
    greedy_uav_stats = {}
    
    if enable_greedy:
        for uav in uavs:
            if hasattr(uav, 'greedy_history'):
                greedy_stats = {
                    'final_depth': uav.model.current_fc_depth if hasattr(uav.model, 'current_fc_depth') else 1,
                    'max_depth': uav.model.max_fc_layers if hasattr(uav.model, 'max_fc_layers') else 3,
                    'additions_count': len(uav.greedy_history),
                    'history': uav.greedy_history
                }
                greedy_uav_stats[uav.id] = greedy_stats
                total_greedy_additions += len(uav.greedy_history)
    
    # Statistiques de leadership et alpha
    leadership_stats = {}
    alpha_usage_stats = {}
    
    for round_num in range(config['fl_rounds']):
        # Chefs de cluster pour ce round
        leaders = [
            acc['uav_id'] for acc in global_results['all_accuracies'] 
            if acc['round'] == round_num and acc.get('is_leader', False)
        ]
        leadership_stats[round_num] = leaders
        
        # Utilisation d'alpha pour ce round
        alpha_users = [
            {'uav_id': acc['uav_id'], 'alpha': acc.get('alpha_used')} 
            for acc in global_results['all_accuracies'] 
            if acc['round'] == round_num and acc.get('alpha_used') is not None
        ]
        alpha_usage_stats[round_num] = alpha_users
    
    # Construction du dictionnaire de r√©sultats complet
    results = {
        'config': config,
        'scenario_name': global_results['scenario_name'],
        'timestamp': global_results['timestamp'],
        'average_accuracy_per_round': average_accuracy_per_round,
        'final_average_accuracy': average_accuracy_per_round[-1] if average_accuracy_per_round else 0,
        'uav_communication_costs': uav_communication_costs,
        'uav_computational_costs': uav_computational_costs,
        'uav_final_accuracies': uav_final_accuracies,
        'total_communication_cost': sum(uav_communication_costs),
        'total_computational_cost': sum(uav_computational_costs),
        'simulation_time': simulation_time,
        'positions': positions,
        'groups': groups,
        'leadership_stats': leadership_stats,
        'alpha_usage_stats': alpha_usage_stats,
        'all_accuracies': global_results['all_accuracies'],
        'greedy_enabled': enable_greedy,
        'total_greedy_additions': total_greedy_additions,
        'greedy_uav_stats': greedy_uav_stats,
        'tee_enabled': global_results.get('tee_enabled', False),
        'security_enabled': global_results.get('security_enabled', False),
        'alpha_enabled': global_results.get('alpha_enabled', False),
        'model_from_test_fin': global_results.get('model_from_test_fin', False),
        'total_tee_operations': total_tee_operations,
        'total_threats_detected': total_threats_detected,
        'security_reports': security_reports,
        'architecture_harmonized': global_results.get('architecture_harmonized', False),
        'topology_filename': global_results.get('topology_filename', 'N/A')
    }
    
    return results

def enhanced_result_generation_in_simulation(results):
    """Appel des fonctions am√©lior√©es de g√©n√©ration de r√©sultats"""
    
    print(f"\nüìä G√âN√âRATION AUTOMATIQUE DES R√âSULTATS...")
    
    # 1. G√©n√©rer les fichiers TXT et JSON
    txt_file, json_file = generate_results_files(results)
    
    # 2. G√©n√©rer tous les graphiques
    graphs = generate_graphs(results)
    
    print(f"\n‚úÖ TOUS LES R√âSULTATS G√âN√âR√âS AVEC SUCC√àS:")
    print(f"üìÅ Dossiers cr√©√©s automatiquement:")
    print(f"   üìÇ results/ - Fichiers de r√©sultats")
    print(f"   üìÇ graphs/ - Graphiques et visualisations")
    print(f"   üìÇ topology/ - Cartes de topologie r√©seau")
    
    return {
        'txt_file': txt_file,
        'json_file': json_file,
        'graphs': graphs
    }

def run_simulation(config, enable_greedy=False):
    """Ex√©cuter la simulation s√©curis√©e avec mod√®le CIFAR-10 de test_fin.py et coefficient alpha"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    greedy_suffix = "_Greedy" if enable_greedy else "_Standard"
    security_suffix = "_TEE_Secure"
    alpha_suffix = f"_Alpha_{config['alpha_inter_cluster']}"
    test_fin_suffix = "_TestFin_Architecture" if config['dataset'] == 'CIFAR-10' else ""
    scenario_name = f"{config['dataset']}_{config['protocol']}_{'IID' if config['iid'] else 'NonIID'}_DFL{security_suffix}{greedy_suffix}{alpha_suffix}{test_fin_suffix}"
    
    test_fin_label = " + MOD√àLE CIFAR-10 DE test_fin.py" if config['dataset'] == 'CIFAR-10' else ""
    print(f"\nüöÅ SIMULATION DFL S√âCURIS√âE + COEFFICIENT ALPHA{test_fin_label}: {scenario_name}")
    print("üîí TEE + D√âTECTION MENACES + CONTR√îLE D'INFLUENCE INTER-CLUSTER")
    print(f"üìä COEFFICIENT ALPHA: {config['alpha_inter_cluster']} ({(1-config['alpha_inter_cluster'])*100:.1f}% local + {config['alpha_inter_cluster']*100:.1f}% externes)")
    print("üÜï AJOUTS: Positions UAV + Communication + Simulation + Topologie")
    if config['dataset'] == 'CIFAR-10':
        print("üîß MOD√àLE CIFAR-10: Architecture exacte de test_fin.py avec support Greedy")
    print("üì° SIMULATION TEMPORELLE avec SimPy Environment")
    print("=" * 100)
    
    num_uavs = config['num_uavs']
    num_clusters = config['num_clusters']
    
    env = simpy.Environment()
    
    # Utilise create_uav_positions avec clusters g√©ographiques
    groups = create_uav_groups(num_uavs, num_clusters)
    positions = create_uav_positions(num_uavs, area_size=100, groups=groups)
    
    print(f"üì° Groupes cr√©√©s: {groups}")
    print(f"üìç Positions UAV g√©n√©r√©es: Clusters g√©ographiquement proches")
    
    partitions = partition_dataset(num_uavs, config['iid'], config['dataset'])
    test_loader, model_class = load_test_dataset(config['dataset'], enable_greedy)
    
    # Afficher les informations sur les mod√®les
    temp_model = model_class()
    total_params = sum(p.numel() for p in temp_model.parameters())
    model_type = "Simple" if config['dataset'] == "MNIST" else "Architecture de test_fin.py"
    print(f"üß† Mod√®le {config['dataset']}: {total_params:,} param√®tres ({model_type})")
    
    if config['dataset'] == 'CIFAR-10':
        print(f"üîß ARCHITECTURE: Mod√®le CIFAR-10 exact de test_fin.py avec support Greedy")
        print(f"‚ö° Performance attendue: Identique √† test_fin.py")
        print(f"‚è±Ô∏è Temps: Compatible avec test_fin.py")
    
    # G√©n√©ration de la topologie AVANT la simulation
    topology_filename = generate_network_topology_image(positions, groups)
    
    global_results = {
        'all_accuracies': [],
        'uavs': {},
        'current_round': 0,
        'greedy_enabled': enable_greedy,
        'tee_enabled': True,
        'security_enabled': True,
        'alpha_enabled': True,
        'model_from_test_fin': config['dataset'] == 'CIFAR-10',
        'architecture_harmonized': True,
        'config': config,
        'scenario_name': scenario_name,
        'timestamp': timestamp,
        'topology_filename': topology_filename
    }
    
    cluster_manager = ClusterManager(env, groups, global_results)
    
    uavs = []
    print("üöÄ Initialisation des UAVs...")
    for uav_id in range(num_uavs):
        cluster_id = None
        group_ids = None
        for idx, group in enumerate(groups):
            if uav_id in group:
                cluster_id = idx
                group_ids = group
                break
        
        uav = SecureUAV(
            env=env,
            uav_id=uav_id,
            cluster_id=cluster_id,
            group_ids=group_ids,
            dataset=partitions[uav_id],
            test_loader=test_loader,
            model_class=model_class,
            protocol=config['protocol'],
            positions=positions,
            config=config,
            global_results=global_results,
            cluster_manager=cluster_manager,
            enable_greedy=enable_greedy
        )
        
        uavs.append(uav)
        global_results['uavs'][uav_id] = uav
        
        # Afficher position avec cluster et alpha
        pos = positions[uav_id]
        print(f"   ‚úÖ UAV-{uav_id} initialis√© (Cluster {cluster_id}, Position: {pos[0]:.1f},{pos[1]:.1f}, Œ±={config['alpha_inter_cluster']})")
    
    print("üöÄ D√©marrage de la simulation DFL S√âCURIS√âE + COEFFICIENT ALPHA...")
    print("üìã ARCHITECTURE:")
    print("   ‚Ä¢ Communication intra-cluster: Standard FedAvg s√©curis√©")
    print("   ‚Ä¢ Communication inter-cluster: Chefs seulement avec TEE + coefficient alpha")
    print(f"   ‚Ä¢ Influence externe: {config['alpha_inter_cluster']*100:.1f}% des mod√®les externes")
    print(f"   ‚Ä¢ Pr√©servation locale: {(1-config['alpha_inter_cluster'])*100:.1f}% du mod√®le local")
    print(f"   ‚Ä¢ Formule: Mod√®le_Final = {1-config['alpha_inter_cluster']:.1f} √ó Local + {config['alpha_inter_cluster']:.1f} √ó Externes")
    print(f"   ‚Ä¢ Mod√®le {config['dataset']}: {model_type} avec TEE")
    if config['dataset'] == 'CIFAR-10':
        print("   üîß ‚Ä¢ Mod√®le CIFAR-10: Architecture exacte de test_fin.py")
    print("   üÜï ‚Ä¢ Positions UAV: G√©n√©r√©es automatiquement avec clusters g√©ographiques")
    print("   üÜï ‚Ä¢ D√©lais communication: Bas√©s sur distance euclidienne (get_comm_delay)")
    print("   üÜï ‚Ä¢ Simulation temporelle: SimPy Environment")
    print(f"   üÜï ‚Ä¢ Topologie sauvegard√©e: {topology_filename}")
    print("   üîí ‚Ä¢ S√©curit√©: TEE + D√©tection menaces locale")
    if enable_greedy:
        print("   üß† ‚Ä¢ Optimisation: Greedy Layer-Wise adaptatif")
    
    start_time = time.time()
    
    try:
        # Utilisation de simpy.Environment() pour la simulation temporelle
        print("‚è±Ô∏è Lancement de l'environnement SimPy...")
        env.run()
        print("‚úÖ Simulation SimPy termin√©e normalement")
    except Exception as e:
        print(f"‚ö†Ô∏è Simulation interrompue: {e}")
        import traceback
        traceback.print_exc()
    
    end_time = time.time()
    
    # MODIFICATION: Utiliser enhanced_collect_results au lieu de collect_results
    results = enhanced_collect_results(uavs, config, positions, groups, end_time - start_time, global_results, enable_greedy)
    
    # MODIFICATION: Utiliser enhanced_result_generation_in_simulation
    generated_files = enhanced_result_generation_in_simulation(results)
    
    print(f"‚úÖ Simulation DFL S√âCURIS√âE + COEFFICIENT ALPHA termin√©e en {end_time - start_time:.2f} secondes")
    print(f"üéØ Pr√©cision finale moyenne: {results['final_average_accuracy']:.4f} ({results['final_average_accuracy']*100:.1f}%)")
    print(f"üì° Co√ªt total communication: {results['total_communication_cost'] / 1024:.1f} KB")
    print(f"üîí Op√©rations TEE totales: {results['total_tee_operations']}")
    print(f"üõ°Ô∏è Menaces d√©tect√©es totales: {results['total_threats_detected']}")
    print(f"üìä Coefficient Alpha: {config['alpha_inter_cluster']} ({(1-config['alpha_inter_cluster'])*100:.1f}% local + {config['alpha_inter_cluster']*100:.1f}% externes)")
    if enable_greedy:
        print(f"üß† Ajouts de couches Greedy: {results['total_greedy_additions']}")
    if config['dataset'] == 'CIFAR-10':
        print(f"üîß Mod√®le CIFAR-10: Architecture de test_fin.py utilis√©e avec succ√®s!")
    print(f"üó∫Ô∏è Topologie: {topology_filename}")
    
    print(f"\nüìÅ FICHIERS G√âN√âR√âS AUTOMATIQUEMENT:")
    print(f"   üìù Rapport d√©taill√©: {generated_files['txt_file']}")
    print(f"   üìã Donn√©es JSON: {generated_files['json_file']}")
    print(f"   üìà Graphiques: {len(generated_files['graphs'])} fichiers PNG")
    
    return results

# ================================
# FONCTIONS UTILITAIRES
# ================================

def get_user_choice(options, prompt):
    """Fonction utilitaire pour obtenir un choix utilisateur"""
    print(f"\n{prompt}")
    for i, option in enumerate(options, 1):
        print(f"  {i}) {option}")
    
    while True:
        try:
            choice = int(input(f"Choisissez (1-{len(options)}): "))
            if 1 <= choice <= len(options):
                return choice - 1
            else:
                print(f"‚ùå Choix invalide. Entrez un nombre entre 1 et {len(options)}.")
        except ValueError:
            print("‚ùå Veuillez entrer un nombre valide.")

def get_configuration():
    """Interface pour configurer la simulation avec architecture test_fin.py"""
    print("\n‚öôÔ∏è CONFIGURATION SIMULATION S√âCURIS√âE + ARCHITECTURE test_fin.py")
    print("üîß AVEC MOD√àLE CIFAR-10 EXACT DE test_fin.py + FONCTIONNALIT√âS AVANC√âES")
    print("=" * 80)
    
    config = {}
    
    # 1. Choix du dataset avec info architecture test_fin.py
    dataset_choice = get_user_choice([
        "MNIST (Dataset simple, rapide)",
        "CIFAR-10 (Dataset complexe, ARCHITECTURE EXACTE DE test_fin.py)"
    ], "üìä Choisissez le dataset:")
    
    config['dataset'] = 'MNIST' if dataset_choice == 0 else 'CIFAR-10'
    
    if config['dataset'] == 'CIFAR-10':
        print("üîß ARCHITECTURE CIFAR-10 DE test_fin.py S√âLECTIONN√âE:")
        print("   ‚Ä¢ Architecture 100% identique √† test_fin.py")
        print("   ‚Ä¢ Compatibilit√© parfaite entre les deux codes")
        print("   ‚Ä¢ Performance identique √† test_fin.py")
        print("   ‚Ä¢ Support Greedy ajout√© sans modification du core")
    
    # 2. Distribution des donn√©es
    iid_choice = get_user_choice([
        "IID (Distribution √©quilibr√©e)",
        "Non-IID (Distribution h√©t√©rog√®ne, plus r√©aliste)"
    ], "üìà Distribution des donn√©es:")
    
    config['iid'] = iid_choice == 0
    
    # 3. Protocole de communication
    protocol_choice = get_user_choice([
        "All-to-All (Communication compl√®te)",
        "Gossip (Communication √©conomique)"
    ], "üì° Protocole de communication:")
    
    config['protocol'] = 'alltoall' if protocol_choice == 0 else 'gossip'
    
    # 4. Coefficient alpha pour inter-cluster
    print("\nüìä COEFFICIENT ALPHA INTER-CLUSTER:")
    print("  üí° Contr√¥le l'influence des mod√®les externes sur chaque cluster")
    print("  üìä Formule: Mod√®le_Final = (1-Œ±) √ó Local + Œ± √ó Externes")
    print("  üìä Œ± = 0.1 ‚Üí 90% local + 10% externes (faible collaboration)")
    print("  üìä Œ± = 0.3 ‚Üí 70% local + 30% externes (collaboration mod√©r√©e)")
    print("  üìä Œ± = 0.5 ‚Üí 50% local + 50% externes (collaboration √©quilibr√©e)")
    print("  üìä Œ± = 0.7 ‚Üí 30% local + 70% externes (forte collaboration)")
    print("  üéØ Permet de pr√©server l'identit√© de chaque cluster")
    
    alpha_choice = get_user_choice([
        "Œ± = 0.1 (90% local, 10% externe - Faible collaboration)",
        "Œ± = 0.3 (70% local, 30% externe - Collaboration mod√©r√©e)",
        "Œ± = 0.5 (50% local, 50% externe - Collaboration √©quilibr√©e)",
        "Œ± = 0.7 (30% local, 70% externe - Forte collaboration)",
        "Personnalis√© (saisir une valeur)"
    ], "Coefficient alpha:")
    
    if alpha_choice == 4:  # Personnalis√©
        while True:
            try:
                alpha = float(input("   Entrez la valeur d'alpha (0.01-0.99): "))
                if 0.01 <= alpha <= 0.99:
                    config['alpha_inter_cluster'] = alpha
                    break
                print("   ‚ùå Alpha doit √™tre entre 0.01 et 0.99")
            except ValueError:
                print("   ‚ùå Veuillez entrer un nombre d√©cimal valide")
    else:
        alpha_values = [0.1, 0.3, 0.5, 0.7]
        config['alpha_inter_cluster'] = alpha_values[alpha_choice]
    
    print(f"üìä Coefficient Alpha s√©lectionn√©: {config['alpha_inter_cluster']}")
    print(f"   üí° Influence: {(1-config['alpha_inter_cluster'])*100:.1f}% locale + {config['alpha_inter_cluster']*100:.1f}% externe")
    
    # 5. Configuration des param√®tres
    print("\nüîß Configuration des param√®tres:")
    
    while True:
        try:
            config['num_uavs'] = int(input("   Nombre d'UAVs/Drones (3-20): "))
            if 3 <= config['num_uavs'] <= 20:
                break
            print("   ‚ùå Entrez un nombre entre 3 et 20")
        except ValueError:
            print("   ‚ùå Veuillez entrer un nombre valide")
    
    while True:
        try:
            config['num_clusters'] = int(input(f"   Nombre de clusters/groupes (1-5): "))
            if 1 <= config['num_clusters'] <= min(5, config['num_uavs']):
                break
            print(f"   ‚ùå Entrez un nombre entre 1 et {min(5, config['num_uavs'])}")
        except ValueError:
            print("   ‚ùå Veuillez entrer un nombre valide")
    
    while True:
        try:
            config['fl_rounds'] = int(input("   Nombre de rounds (1-20): "))
            if 1 <= config['fl_rounds'] <= 20:
                break
            print("   ‚ùå Entrez un nombre entre 1 et 20")
        except ValueError:
            print("   ‚ùå Veuillez entrer un nombre valide")
    
    while True:
        try:
            config['local_epochs'] = int(input("   √âpoques locales (1-10): "))
            if 1 <= config['local_epochs'] <= 10:
                break
            print("   ‚ùå Entrez un nombre entre 1 et 10")
        except ValueError:
            print("   ‚ùå Veuillez entrer un nombre valide")
    
    batch_choice = get_user_choice([
        "32 (Rapide, moins pr√©cis)",
        "64 (√âquilibr√©)",
        "128 (Lent, plus pr√©cis)"
    ], "   Taille de batch:")
    
    config['batch_size'] = [32, 64, 128][batch_choice]
    
    return config

def main():
    """Fonction principale avec architecture CIFAR-10 exacte de test_fin.py"""
    print("üöÅ UAV FEDERATED LEARNING SIMULATOR S√âCURIS√â - ARCHITECTURE test_fin.py")
    print("üîß MOD√àLE CIFAR-10 EXACT DE test_fin.py + FONCTIONNALIT√âS AVANC√âES")
    print("üîí TEE + D√âTECTION MENACES + GREEDY LAYER-WISE + COEFFICIENT ALPHA")
    print("üìä + CONTR√îLE D'INFLUENCE INTER-CLUSTER AVEC COEFFICIENT ALPHA")
    print("ü§ù + HARMONISATION PARFAITE AVEC test_fin.py")
    print("üÜï + AJOUTS COMPLETS:")
    print("   ‚Ä¢ Positions UAV g√©n√©r√©es automatiquement")
    print("   ‚Ä¢ D√©lais communication bas√©s sur distance euclidienne")
    print("   ‚Ä¢ Simulation temporelle avec SimPy Environment")
    print("   ‚Ä¢ G√©n√©ration automatique de topologie PNG")
    print("üìä G√âN√âRATION AUTOMATIQUE DE R√âSULTATS ET GRAPHIQUES")
    print("=" * 100)
    
    # Afficher les d√©tails des mod√®les harmonis√©s
    print(f"\nüß† MOD√àLES HARMONIS√âS AVEC test_fin.py:")
    
    # Test MNIST
    model_mnist = CNNModelMNIST()
    params_mnist = sum(p.numel() for p in model_mnist.parameters())
    print(f"   ‚Ä¢ MNIST: {params_mnist:,} param√®tres (Simple, identique)")
    
    # Test CIFAR-10 harmonis√©
    model_cifar = CNNModelCIFAR10()
    params_cifar = sum(p.numel() for p in model_cifar.parameters())
    print(f"   ‚Ä¢ CIFAR-10: {params_cifar:,} param√®tres (Architecture exacte de test_fin.py)")
    print(f"   üîß HARMONISATION R√âUSSIE: Architecture 100% identique √† test_fin.py")
    print(f"   ‚ö° Compatibilit√©: Codes unifi√©s pour maintenance")
    print(f"   ü§ù Support Greedy: Ajout√© sans modification du mod√®le de base")
    
    try:
        # Configuration de la simulation
        config = get_configuration()
        
        # Choix du type d'entra√Ænement
        training_choice = get_user_choice([
            "Standard s√©curis√© (TEE + D√©tection menaces + Coefficient Alpha + Architecture test_fin.py)",
            "Greedy s√©curis√© (TEE + D√©tection menaces + Greedy Layer-Wise + Coefficient Alpha + Architecture test_fin.py)"
        ], "üß† Type d'entra√Ænement:")
        
        enable_greedy = training_choice == 1
        
        print(f"\nüìã CONFIGURATION FINALE HARMONIS√âE:")
        print(f"  ‚Ä¢ Dataset: {config['dataset']}")
        if config['dataset'] == 'CIFAR-10':
            print(f"  üîß Mod√®le CIFAR-10: ARCHITECTURE EXACTE DE test_fin.py")
        print(f"  ‚Ä¢ Distribution: {'IID' if config['iid'] else 'Non-IID'}")
        print(f"  ‚Ä¢ Protocole: {config['protocol'].upper()}")
        print(f"  ‚Ä¢ UAVs/Drones: {config['num_uavs']}")
        print(f"  ‚Ä¢ Clusters/Groupes: {config['num_clusters']}")
        print(f"  ‚Ä¢ Rounds: {config['fl_rounds']}")
        print(f"  ‚Ä¢ √âpoques locales: {config['local_epochs']}")
        print(f"  ‚Ä¢ Batch size: {config['batch_size']}")
        print(f"  ‚Ä¢ Type: {'Greedy' if enable_greedy else 'Standard'} s√©curis√©")
        print(f"  ‚Ä¢ S√©curit√©: TEE + D√©tection menaces activ√©es")
        print(f"  üìä Coefficient Alpha: {config['alpha_inter_cluster']}")
        print(f"  üìä Influence: {(1-config['alpha_inter_cluster'])*100:.1f}% locale + {config['alpha_inter_cluster']*100:.1f}% externe")
        print(f"  üìä Formule: {1-config['alpha_inter_cluster']:.1f} √ó Local + {config['alpha_inter_cluster']:.1f} √ó Externes")
        print(f"  üÜï Ajouts: Positions + Communication + Simulation + Topologie")
        if config['dataset'] == 'CIFAR-10':
            print(f"  üîß Harmonisation: Architecture exacte de test_fin.py")
        print(f"  ‚Ä¢ G√©n√©ration: R√©sultats et graphiques automatiques")
        
        # Confirmation
        print("\n‚ùì Voulez-vous lancer la simulation DFL S√©curis√©e + Architecture test_fin.py ?")
        print("  1) Oui, lancer la simulation harmonis√©e")
        print("  2) Non, recommencer la configuration")
        print("  3) Annuler")
        
        while True:
            try:
                confirm = int(input("Votre choix (1-3): "))
                if confirm == 1:
                    break
                elif confirm == 2:
                    return main()  # Recommencer
                elif confirm == 3:
                    print("‚ùå Simulation annul√©e.")
                    return
                else:
                    print("‚ùå Choix invalide. Choisissez 1, 2 ou 3.")
            except ValueError:
                print("‚ùå Veuillez entrer un nombre valide.")
        
        # Lancement de la simulation
        greedy_label = "Greedy" if enable_greedy else "Standard"
        arch_label = " + ARCHITECTURE test_fin.py" if config['dataset'] == 'CIFAR-10' else ""
        print(f"\nüöÄ LANCEMENT DE LA SIMULATION {greedy_label.upper()} S√âCURIS√âE{arch_label}...")
        print(f"üìÖ D√©but: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìä Coefficient Alpha: {config['alpha_inter_cluster']} ({(1-config['alpha_inter_cluster'])*100:.1f}% local + {config['alpha_inter_cluster']*100:.1f}% externe)")
        
        if config['dataset'] == 'CIFAR-10':
            print("üîß Utilisation de l'architecture CIFAR-10 exacte de test_fin.py")
            print("‚ö° Performance identique √† test_fin.py")
            print("ü§ù Codes parfaitement harmonis√©s")
        
        results = run_simulation(config, enable_greedy=enable_greedy)
        
        print(f"\nüéâ SIMULATION {greedy_label.upper()} S√âCURIS√âE + ARCHITECTURE test_fin.py TERMIN√âE AVEC SUCC√àS!")
        print(f"üìÖ Fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üéØ Pr√©cision finale: {results['final_average_accuracy']*100:.2f}%")
        print(f"‚è±Ô∏è Temps d'ex√©cution: {results['simulation_time']:.2f} secondes")
        print(f"üìÅ Fichiers g√©n√©r√©s dans les dossiers:")
        print(f"   üìÇ results/ - Fichiers TXT et JSON d√©taill√©s")
        print(f"   üìÇ graphs/ - Graphiques automatiques")
        print(f"   üìÇ topology/ - Topologie PNG")
        print(f"   üìä Scenario: {results['scenario_name']}")
        print(f"   üó∫Ô∏è Topologie: {results['topology_filename']}")
        
        # Statistiques d√©taill√©es avec harmonisation
        print(f"\nüìä STATISTIQUES D√âTAILL√âES HARMONIS√âES:")
        print(f"   üì° Co√ªt communication total: {results['total_communication_cost'] / 1024:.1f} KB")
        print(f"   üíª Co√ªt computation total: {results['total_computational_cost']:,}")
        print(f"   üîí Op√©rations TEE: {results['total_tee_operations']}")
        print(f"   üõ°Ô∏è Menaces d√©tect√©es: {results['total_threats_detected']}")
        print(f"   üìä Coefficient Alpha: {config['alpha_inter_cluster']} ({(1-config['alpha_inter_cluster'])*100:.1f}% local + {config['alpha_inter_cluster']*100:.1f}% externe)")
        
        if enable_greedy:
            print(f"   üß† Ajouts de couches Greedy: {results['total_greedy_additions']}")
            if results['total_greedy_additions'] > 0:
                print(f"   ‚ö° Le mod√®le s'est adapt√© dynamiquement dans le TEE avec architecture test_fin.py!")
        
        if config['dataset'] == 'CIFAR-10':
            print(f"   üîß Architecture test_fin.py: Harmonis√©e avec succ√®s!")
            print(f"   ‚ö° Performance: {results['final_average_accuracy']*100:.1f}% (identique √† test_fin.py)")
            print(f"   ü§ù Compatibilit√©: 100% avec test_fin.py")
        
        # Analyse de l'harmonisation
        print(f"\nü§ù HARMONISATION R√âUSSIE:")
        print(f"   üîß Architecture: test_fin.py et test_dfl_tee.py utilisent le m√™me mod√®le CIFAR-10")
        print(f"   üìä Performance: Identique dans les deux codes")
        print(f"   üß† Fonctionnalit√©s: test_dfl_tee.py garde toutes ses sp√©cificit√©s")
        print(f"   üîí S√©curit√©: TEE + D√©tection menaces (sp√©cifique √† test_dfl_tee.py)")
        print(f"   üìä Alpha: Coefficient disponible dans les deux codes")
        print(f"   üß† Greedy: Support ajout√© sans modification du mod√®le de base")
        print(f"   üõ†Ô∏è Maintenance: Un seul mod√®le CIFAR-10 √† maintenir")
        
        print(f"\nüèÜ CODES PARFAITEMENT HARMONIS√âS:")
        print(f"   ‚úÖ test_fin.py: DFL avec coefficient alpha + mod√®le CIFAR-10")
        print(f"   ‚úÖ test_dfl_tee.py: DFL s√©curis√© + TEE + coefficient alpha + M√äME mod√®le CIFAR-10")
        print(f"   ‚úÖ Architecture unifi√©e: M√™me base pour les deux codes")
        print(f"   ‚úÖ Fonctionnalit√©s pr√©serv√©es: Chaque code garde ses sp√©cificit√©s")
        print(f"   ‚úÖ Maintenance simplifi√©e: Une seule architecture √† maintenir")
        print(f"   ‚úÖ Performance coh√©rente: R√©sultats comparables entre les codes")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Simulation interrompue par l'utilisateur (Ctrl+C)")
        print("üëã Au revoir!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur pendant la simulation: {str(e)}")
        print("üêõ D√©tails de l'erreur:")
        import traceback
        traceback.print_exc()

def test_multiple_alpha_values():
    """Tester plusieurs valeurs d'alpha automatiquement avec architecture test_fin.py"""
    
    print("\nüß™ TEST AUTOMATIQUE DE DIFF√âRENTES VALEURS D'ALPHA AVEC ARCHITECTURE test_fin.py")
    print("=" * 80)
    
    base_config = {
        'dataset': 'CIFAR-10',
        'protocol': 'alltoall',
        'iid': False,
        'num_uavs': 9,
        'num_clusters': 3,
        'fl_rounds': 8,
        'local_epochs': 3,
        'batch_size': 64
    }
    
    alpha_values = [0.1, 0.3, 0.5, 0.7]
    results_comparison = []
    
    for alpha in alpha_values:
        print(f"\nüß™ TEST TEE S√âCURIS√â + ARCHITECTURE test_fin.py AVEC ALPHA = {alpha}")
        print(f"   üìä Influence: {(1-alpha)*100:.0f}% local + {alpha*100:.0f}% externe")
        print(f"   üîí S√©curit√©: TEE + D√©tection menaces activ√©es")
        print(f"   üîß Architecture: Exacte de test_fin.py")
        print("=" * 70)
        
        config = base_config.copy()
        config['alpha_inter_cluster'] = alpha
        
        results = run_simulation(config, enable_greedy=False)
        
        results_comparison.append({
            'alpha': alpha,
            'final_accuracy': results['final_average_accuracy'],
            'communication_cost': results['total_communication_cost'],
            'simulation_time': results['simulation_time'],
            'tee_operations': results['total_tee_operations'],
            'threats_detected': results['total_threats_detected']
        })
        
        print(f"   üìä Alpha {alpha}: Accuracy = {results['final_average_accuracy']*100:.2f}%")
        print(f"   üì° Communication: {results['total_communication_cost']/1024:.1f} KB")
        print(f"   üîí TEE Operations: {results['total_tee_operations']}")
        print(f"   üõ°Ô∏è Menaces d√©tect√©es: {results['total_threats_detected']}")
        print(f"   ‚è±Ô∏è Temps: {results['simulation_time']:.1f}s")
    
    # Afficher la comparaison finale
    print(f"\nüìà COMPARAISON FINALE DES VALEURS D'ALPHA AVEC ARCHITECTURE test_fin.py:")
    print("=" * 95)
    print("Alpha | Accuracy | Communication | TEE Ops | Menaces | Temps | Influence")
    print("-" * 95)
    for result in results_comparison:
        alpha = result['alpha']
        accuracy = result['final_accuracy'] * 100
        comm = result['communication_cost'] / 1024
        tee_ops = result['tee_operations']
        threats = result['threats_detected']
        time_s = result['simulation_time']
        influence = f"{(1-alpha)*100:.0f}%L+{alpha*100:.0f}%E"
        print(f"{alpha:5.1f} | {accuracy:8.2f}% | {comm:11.1f} KB | {tee_ops:7d} | {threats:7d} | {time_s:5.1f}s | {influence}")
    
    # Trouver la meilleure valeur avec crit√®res multiples
    best_result = max(results_comparison, key=lambda x: x['final_accuracy'])
    most_secure = max(results_comparison, key=lambda x: x['tee_operations'])
    
    print(f"\nüèÜ ANALYSES AVEC ARCHITECTURE test_fin.py:")
    print(f"   üéØ Meilleure performance: Alpha {best_result['alpha']} ({best_result['final_accuracy']*100:.2f}%)")
    print(f"   üîí Plus s√©curis√©: Alpha {most_secure['alpha']} ({most_secure['tee_operations']} op√©rations TEE)")
    print(f"   üîß Architecture: test_fin.py harmonis√©e dans tous les tests")
    print(f"   üí° Recommandation: Alpha 0.3 pour √©quilibre performance/s√©curit√©/contr√¥le")
    
    return results_comparison

def test_result_generation():
    """Fonction de test pour la g√©n√©ration de r√©sultats"""
    
    # Configuration de test
    test_config = {
        'dataset': 'CIFAR-10',
        'protocol': 'alltoall',
        'iid': False,
        'num_uavs': 9,
        'num_clusters': 3,
        'fl_rounds': 5,
        'local_epochs': 3,
        'batch_size': 64,
        'alpha_inter_cluster': 0.3
    }
    
    # Donn√©es de test simul√©es
    test_results = {
        'config': test_config,
        'scenario_name': 'TEST_CIFAR10_alltoall_NonIID_DFL_TEE_Secure_Greedy_Alpha_0.3_TestFin_Architecture',
        'timestamp': datetime.now().strftime("%Y%m%d_%H%M%S"),
        'average_accuracy_per_round': [0.45, 0.67, 0.78, 0.85, 0.91],
        'final_average_accuracy': 0.91,
        'uav_communication_costs': [45000, 46000, 44000, 47000, 45500, 46500, 44500, 46800, 45200],
        'uav_computational_costs': [180000, 185000, 175000, 190000, 182000, 188000, 178000, 186000, 181000],
        'uav_final_accuracies': [0.92, 0.90, 0.91, 0.89, 0.92, 0.90, 0.91, 0.93, 0.88],
        'total_communication_cost': 415500,
        'total_computational_cost': 1665000,
        'simulation_time': 125.7,
        'positions': [(10, 15), (12, 18), (8, 14), (45, 50), (47, 52), (43, 48), (80, 25), (82, 28), (78, 23)],
        'groups': [[0, 1, 2], [3, 4, 5], [6, 7, 8]],
        'leadership_stats': {0: [0, 3, 6], 1: [1, 4, 7], 2: [2, 5, 8], 3: [0, 3, 6], 4: [1, 4, 7]},
        'alpha_usage_stats': {0: [{'uav_id': 0, 'alpha': 0.3}, {'uav_id': 3, 'alpha': 0.3}, {'uav_id': 6, 'alpha': 0.3}]},
        'greedy_enabled': True,
        'total_greedy_additions': 6,
        'greedy_uav_stats': {
            0: {'final_depth': 2, 'max_depth': 3, 'additions_count': 1, 'history': []},
            1: {'final_depth': 3, 'max_depth': 3, 'additions_count': 2, 'history': []},
            2: {'final_depth': 2, 'max_depth': 3, 'additions_count': 1, 'history': []}
        },
        'tee_enabled': True,
        'security_enabled': True,
        'alpha_enabled': True,
        'model_from_test_fin': True,
        'total_tee_operations': 450,
        'total_threats_detected': 12,
        'security_reports': [
            {'uav_id': i, 'security_stats': {'tee_operations': 50, 'threats_detected': 1, 'secure_trainings': 5}}
            for i in range(9)
        ],
        'architecture_harmonized': True,
        'topology_filename': 'topology/test_topology.png'
    }
    
    print("üß™ TEST DE G√âN√âRATION DE R√âSULTATS...")
    
    # Tester la g√©n√©ration des fichiers
    txt_file, json_file = generate_results_files(test_results)
    
    # Tester la g√©n√©ration des graphiques
    graphs = generate_graphs(test_results)
    
    print("‚úÖ Test de g√©n√©ration de r√©sultats termin√© avec succ√®s!")
    print(f"üìÅ Fichiers g√©n√©r√©s dans results/ et graphs/")
    
    return test_results

if __name__ == "__main__":
    # V√©rification des d√©pendances
    try:
        import torch
        import torchvision
        import simpy
        import matplotlib
        import pandas
        print("‚úÖ Toutes les d√©pendances sont disponibles.")
        print("üîß ARCHITECTURE CIFAR-10 EXACTE DE test_fin.py INT√âGR√âE:")
        print("   ‚Ä¢ Architecture 100% identique √† test_fin.py")
        print("   ‚Ä¢ Support Greedy ajout√© sans modification du core")
        print("   ‚Ä¢ Compatibilit√© parfaite entre les codes")
        print("üîí TEE + D√©tection menaces + Greedy Layer-Wise + Coefficient Alpha pr√™ts")
        print("üìä COEFFICIENT ALPHA POUR CONTR√îLE D'INFLUENCE:")
        print("   ‚Ä¢ weighted_fedavg_with_alpha() - Agr√©gation avec contr√¥le")
        print("   ‚Ä¢ Formule: (1-Œ±) √ó Local + Œ± √ó Externes")
        print("   ‚Ä¢ Pr√©servation identit√© des clusters")
        print("üÜï AJOUTS DE uav_dfl_p2p.py INT√âGR√âS:")
        print("   ‚Ä¢ create_uav_positions() - G√©n√©ration positions UAV")
        print("   ‚Ä¢ get_comm_delay() - D√©lais bas√©s sur distance euclidienne")
        print("   ‚Ä¢ euclidean_distance() - Calcul distance entre UAVs")
        print("   ‚Ä¢ generate_network_topology_image() - Topologie PNG")
        print("   ‚Ä¢ simpy.Environment() - Simulation temporelle")
        print("üìä G√âN√âRATION AUTOMATIQUE DE R√âSULTATS ACTIV√âE")
        print("üéØ VERSION COMPL√àTE OPTIMIS√âE: S√©curit√© + Performance + Contr√¥le d'influence")
        
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("üì¶ Installez avec: pip install torch torchvision simpy matplotlib pandas numpy")
        exit(1)
    
    # Menu principal
    print(f"\nüéØ CHOISISSEZ LE MODE:")
    print("  1) Simulation interactive personnalis√©e")
    print("  2) Test automatique des valeurs d'alpha")
    print("  3) Test de g√©n√©ration de r√©sultats uniquement")
    print("  4) Quitter")
    
    while True:
        try:
            mode_choice = int(input("Votre choix (1-4): "))
            if mode_choice == 1:
                main()
                break
            elif mode_choice == 2:
                test_multiple_alpha_values()
                break
            elif mode_choice == 3:
                test_result_generation()
                break
            elif mode_choice == 4:
                print("üëã Au revoir!")
                break
            else:
                print("‚ùå Choix invalide. Choisissez 1, 2, 3 ou 4.")
        except ValueError:
            print("‚ùå Veuillez entrer un nombre valide.")
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")
            break     
